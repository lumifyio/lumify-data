<!--
  Copyright (c) 2010 Yahoo! Inc. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. See accompanying LICENSE file.
-->
<workflow-app xmlns="uri:oozie:workflow:0.1" name="mr-job-aggregate-wf">
    <start to="content-type-node"/>
    <action name="content-type-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/content-type</app-path>
			<propagate-configuration/>
        </sub-workflow>
        <ok to="video-conversion-node"/>
        <error to="fail"/>
    </action>
    <action name="video-conversion-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/video-conversion</app-path>
			<propagate-configuration/>
        </sub-workflow>
        <ok to="video-frame-text-node"/>
        <error to="video-frame-text-node"/>
    </action>
    <action name="video-frame-text-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/video-frame-text</app-path>
			<propagate-configuration/>
        </sub-workflow>
        <ok to="artifact-face-detection-node"/>
        <error to="artifact-face-detection-node"/>
    </action>
    <action name="artifact-face-detection-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/object-detection</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>objectDetectionMapper</name>
					<value>${basePackage}.objectDetection.ObjectDetectionMR$ArtifactObjectDetectionMapper</value>
				</property>
				<property>
					<name>objectDetectionInputFormat</name>
					<value>${inputFormatArtifact}</value>
				</property>
				<property>
					<name>objectDetectionTableName</name>
					<value>${tableArtifact}</value>
				</property>
				<property>
			        <name>objectDetectorClass</name>
			        <value>${basePackage}.objectDetection.OpenCVObjectDetector</value>
			    </property>
				<property>
			        <name>classifierFile</name>
			        <value>haarcascade_frontalface_alt.xml</value>
			    </property>
				<property>
			        <name>classifierConcept</name>
			        <value>face</value>
			    </property>
			</configuration>
        </sub-workflow>
        <ok to="video-frame-face-detection-node"/>
        <error to="video-frame-face-detection-node"/>
    </action>
    <action name="video-frame-face-detection-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/object-detection</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>objectDetectionMapper</name>
					<value>${basePackage}.objectDetection.ObjectDetectionMR$VideoFrameObjectDetectionMapper</value>
				</property>
				<property>
					<name>objectDetectionInputFormat</name>
					<value>${inputFormatVideoFrame}</value>
				</property>
				<property>
					<name>objectDetectionTableName</name>
					<value>${tableVideoFrame}</value>
				</property>
				<property>
			        <name>objectDetectorClass</name>
			        <value>${basePackage}.objectDetection.OpenCVObjectDetector</value>
			    </property>
				<property>
			        <name>classifierFile</name>
			        <value>haarcascade_frontalface_alt.xml</value>
			    </property>
				<property>
			        <name>classifierConcept</name>
			        <value>face</value>
			    </property>
			</configuration>
        </sub-workflow>
        <ok to="text-ocr-node"/>
        <error to="text-ocr-node"/>
    </action>
    <action name="text-ocr-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/text-extraction</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>textExtractor</name>
					<value>${basePackage}.textExtraction.ImageOcrTextExtractor</value>
				</property>
			</configuration>
        </sub-workflow>
        <ok to="text-tika-node"/>
        <error to="text-tika-node"/>
    </action>
    <action name="text-tika-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/text-extraction</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>textExtractor</name>
					<value>${basePackage}.textExtraction.TikaTextExtractor</value>
				</property>
			</configuration>
        </sub-workflow>
        <ok to="text-structured-data-node"/>
        <error to="text-structured-data-node"/>
    </action>
    <action name="text-structured-data-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/text-extraction</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>textExtractor</name>
					<value>${basePackage}.textExtraction.StructuredDataTextExtractor</value>
				</property>
			</configuration>
        </sub-workflow>
        <ok to="text-transcript-node"/>
        <error to="text-transcript-node"/>
    </action>
    <action name="text-transcript-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/text-extraction</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>textExtractor</name>
					<value>${basePackage}.textExtraction.TranscriptTextExtractor</value>
				</property>
			</configuration>
        </sub-workflow>
        <ok to="video-frame-text-combiner-node"/>
        <error to="video-frame-text-combiner-node"/>
    </action>
    <action name="video-frame-text-combiner-node">
		<sub-workflow>  
			 <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/text-extraction</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>textExtractor</name>
				    <value>${basePackage}.textExtraction.VideoFrameTextCombinerTextExtractor</value>
				</property>
			</configuration>
        </sub-workflow>
        <ok to="text-consolidation-node"/>
        <error to="text-consolidation-node"/>
    </action>
    <action name="text-consolidation-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/text-consolidation</app-path>
			<propagate-configuration/>
        </sub-workflow>
        <ok to="structured-data-node"/>
        <error to="structured-data-node"/>
    </action>
    <action name="structured-data-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/structured-data</app-path>
			<propagate-configuration/>
        </sub-workflow>
        <ok to="entity-dictionary-node"/>
        <error to="entity-dictionary-node"/>
    </action>
    <action name="entity-dictionary-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/entity-extraction</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>entityExtractor</name>
				    <value>${basePackage}.entityExtraction.OpenNlpDictionaryEntityExtractor</value>
				</property>
			</configuration>
        </sub-workflow>
        <ok to="entity-me-node"/>
        <error to="entity-me-node"/>
    </action>
    <action name="entity-me-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/entity-extraction</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>entityExtractor</name>
				    <value>${basePackage}.entityExtraction.OpenNlpMaximumEntropyEntityExtractor</value>
				</property>
			</configuration>
        </sub-workflow>
        <ok to="entity-email-node"/>
        <error to="entity-email-node"/>
    </action>
    <action name="entity-email-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/entity-extraction</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>entityExtractor</name>
				    <value>${basePackage}.entityExtraction.RegexEntityExtractor</value>
				</property>
				<property>
					<name>regularExpression</name>
				    <value>(?i)\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b</value>
				</property>
				<property>
					<name>entityType</name>
				    <value>emailAddress</value>
				</property>
			</configuration>
        </sub-workflow>
        <ok to="entity-phone-number-node"/>
        <error to="entity-phone-number-node"/>
    </action>
    <action name="entity-phone-number-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/entity-extraction</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>entityExtractor</name>
				    <value>${basePackage}.entityExtraction.PhoneNumberExtractor</value>
				</property>
			</configuration>
        </sub-workflow>
        <ok to="known-entity-node"/>
        <error to="known-entity-node"/>
    </action>
    <action name="known-entity-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/entity-extraction</app-path>
			<propagate-configuration/>
			<configuration>
				<property>
					<name>entityExtractor</name>
				    <value>${basePackage}.entityExtraction.KnownEntityExtractor</value>
				</property>
			</configuration>
        </sub-workflow>
        <ok to="video-preview-node"/>
        <error to="video-preview-node"/>
    </action>
    <action name="video-preview-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/video-preview</app-path>
			<propagate-configuration/>
        </sub-workflow>
        <ok to="term-location-node"/>
        <error to="term-location-node"/>
    </action>
    <action name="term-location-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/term-location</app-path>
			<propagate-configuration/>
        </sub-workflow>
        <ok to="artifact-location-node"/>
        <error to="artifact-location-node"/>
    </action>
    <action name="artifact-location-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/artifact-location</app-path>
			<propagate-configuration/>
        </sub-workflow>
        <ok to="artifact-highlighting-node"/>
        <error to="artifact-highlighting-node"/>
    </action>
    <action name="artifact-highlighting-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/artifact-highlighting</app-path>
			<propagate-configuration/>
        </sub-workflow>
        <ok to="search-index-builder-node"/>
        <error to="search-index-builder-node"/>
    </action>
    <action name="search-index-builder-node">
		<sub-workflow>
            <app-path>${nameNode}/user/${wf:user()}/${workflowRoot}/map-reduce/search-index-builder</app-path>
			<propagate-configuration/>
        </sub-workflow>
        <ok to="end"/>
        <error to="fail"/>
    </action>
    <kill name="fail">
        <message>Extraction aggregate workflow failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>
