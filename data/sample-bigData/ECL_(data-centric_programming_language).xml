<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>ECL (data-centric programming language)</title>
    <ns>0</ns>
    <id>31108124</id>
    <revision>
      <id>533410966</id>
      <parentid>510427050</parentid>
      <timestamp>2013-01-16T19:45:09Z</timestamp>
      <contributor>
        <username>Neilc</username>
        <id>53222</id>
      </contributor>
      <minor></minor>
      <comment>/* Comparison to Map-Reduce */</comment>
      <text xml:space="preserve">{{Infobox programming language
| name                   = ECL
| developer              = [[HPCC|HPCC Systems]], LexisNexis Risk Solutions

| logo                   = 
| paradigm               = [[declarative]], [[structured]], [[Data-centric programming language|data-centric]]
| typing                 = [[type system#Static typing|static]], [[type system#Strong and weak typing|strong]], [[type system#Safely and unsafely typed systems|safe]]
| major implementations  = [[Windows Cluster]], [[Linux Cluster]]
| year                   = 2000
| designer               = 
| latest release version = 
| latest release date    = 
| influenced_by          = [[Prolog]], [[Pascal (programming language)|Pascal]], [[SQL]], [[Snobol4]], [[C++]], [[Clarion]]
| influenced             = [[big data]]
| operating_system       = [[Linux]]
| license                = 
| website                = http://hpccsystems.com
}}

'''ECL''' is a declarative, data centric programming language designed in 2000 to allow a team of programmers to process [[big data]] across a high performance computing cluster without the programmer being involved in many of the lower level, imperative decisions.&lt;ref&gt;[http://www.lexisnexis.com/risk/about/guides/program-guide.html A Guide to ECL, [[Lexis-Nexis]].]&lt;/ref&gt;&lt;ref&gt;"Evaluating use of data flow systems for large graph analysis," by A. Yoo, and I. Kaplan. Proceedings of the 2nd Workshop on Many-Task Computing on Grids and Supercomputers, MTAGS, 2009&lt;/ref&gt;

== History ==
ECL was initially designed and developed in 2000 by David Bayliss as an in-house productivity tool within [[Lexis-Nexis|Seisint Inc]] and was considered to be a ‘secret weapon’ that allowed Seisint to gain market share in its data business. Equifax had an SQL-based process for predicting who would go bankrupt in the next 30 days, but it took 26 days to run the data. The first ECL implementation solved the same problem in 6 minutes. The technology was cited as a driving force behind the acquisition of Seisint by [[LexisNexis]] and then again as a major source of synergies when LexisNexis acquired ChoicePoint Inc.&lt;ref&gt;[http://www.reed-elsevier.com/mediacentre/pressreleases/2004/Pages/AcquisitionofSeisint.aspx Acquisition of Seisint]&lt;/ref&gt;


== Language Constructs ==
ECL, at least in its purest form, is a declarative, data centric language. Programs, in the strictest sense, do not exist. Rather an ECL application will specify a number of core datasets (or data values) and then the operations which are to be performed on those values.

=== Hello world ===
ECL is to have succinct solutions to problems and sensible defaults. The ‘Hello World’ program is characteristically short:
‘Hello World’.
Perhaps a more flavorful example would take a list of strings, sort them into order, and then return that as a result instead.

&lt;PRE&gt;
// First declare a dataset with one column containing a list of strings
// Datasets can also be binary, csv, xml or externally defined structures

D := DATASET([{'ECL'},{'Declarative'},{'Data'},{'Centric'},{'Programming'},{'Language'}],{STRING Value;});
SD := SORT(D,Value);
output(SD)
&lt;/PRE&gt;

The statements containing a := are defined in ECL as attribute definitions. They do not denote an action; rather a definition of a term. Thus, logically, an ECL program can be read: “bottom to top”

OUTPUT(SD)

What is an SD?

SD := SORT(D,Value); 

SD is a D that has been sorted by ‘Value’

What is a D?

D := DATASET([{'ECL'},{'Declarative'},{'Data'},{'Centric'},{'Programming'},{'Language'}],{STRING Value;});

D is a dataset with one column labeled ‘Value’ and containing the following list of data.

=== ECL Primitives ===
ECL primitives that act upon datasets include: SORT, ROLLUP, DEDUP, ITERATE, PROJECT, JOIN, NORMALIZE, DENORMALIZE, PARSE, CHOSEN, ENTH, TOPN, DISTRIBUTE

=== ECL Encapsulation ===
Whilst ECL is terse and LexisNexis claims that 1 line of ECL is roughly equivalent to 120 lines of C++ it still has significant support for large scale programming including data encapsulation and code re-use. The constructs available include: MODULE, FUNCTION, INTERFACE, MACRO, EXPORT, SHARED

=== Support for Parallelism in ECL ===
In the [[HPCC]] implementation, by default, most ECL constructs will execute in parallel across the hardware being used. Many of the primitives also have a LOCAL option to specify that the operation is to occur locally on each node.

=== Comparison to Map-Reduce ===
The Hadoop Map-Reduce paradigm actually consists of three phases which correlate to ECL primitives as follows.
{| class="wikitable sortable" style="font-size: 90%; text-align: center; width: auto;"
|-
! Hadoop Name/Term
! ECL equivalent
! Comments
|-
! MAPing within the MAPper	
! PROJECT/TRANSFORM
! Takes a record and converts to a different format; in the [[Hadoop]] case the conversion is into a key-value pair
|-
! SHUFFLE (Phase 1)
! DISTRIBUTE(,HASH(KeyValue))
! The records from the mapper are distributed dependent upon the KEY value
|-
! SHUFFLE (Phase 2)
! SORT(,LOCAL)
! The records arriving at a particular reducer are sorted into KEY order
|-
! REDUCE
! ROLLUP(,Key,LOCAL)
! The records for a particular KEY value are now combined together
|}

== References ==
&lt;!--- See [[Wikipedia:Footnotes]] on how to create references using &lt;ref&gt;&lt;/ref&gt; tags which will then appear here automatically --&gt;
{{Reflist}}

== External links ==
* [http://www.nytimes.com/2008/02/21/technology/21iht-reed.4.10279549.html Reed Elsevier to acquire ChoicePoint for $3.6 billion]
* [http://www.bloomberg.com/apps/news?pid=newsarchive&amp;sid=aBuqYZDOSPL4&amp;refer=uk  Reed Elsevier's LexisNexis Buys Seisint for $775 Mln]
* [http://www.reuters.com/finance/stocks/keyDevelopments?symbol=ENL&amp;pn=15  Reed Elsevier]

[[Category:Declarative programming languages]]
[[Category:Data-centric programming languages]]
[[Category:Big Data]]</text>
      <sha1>0uwe9omhifexuq6f1zdaltocmzfi9dq</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>