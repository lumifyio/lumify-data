<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>Spring Framework</title>
    <ns>0</ns>
    <id>5371713</id>
    <revision>
      <id>561891911</id>
      <parentid>561351405</parentid>
      <timestamp>2013-06-27T23:21:07Z</timestamp>
      <contributor>
        <ip>67.169.155.252</ip>
      </contributor>
      <comment>/* Modules */</comment>
      <text xml:space="preserve">{{Infobox software
| name                   = Spring Framework Version 2
| screenshot             = [[File:Spring Framework.png]]
| caption                =
| developer              = [[SpringSource]]
| status                 = Active
| latest release version = 3.2.3
| latest release date    = {{release date|2013|05|17}}&lt;ref&gt;[http://static.springsource.org/spring/docs/3.2.x/changelog.txt 3.2.x ChangeLog]&lt;/ref&gt;
| latest preview version =
| latest preview date    =
| operating system       = [[Cross-platform]]
| platform               = [[Java Virtual Machine]]
| programming language   = [[Java (programming language)|Java]]
| genre                  = Application framework
| license                = [[Apache License]] 2.0
| website                = {{url|http://www.springsource.org}}
}}
The '''Spring Framework'''  is an [[open source]] [[application framework]] and [[inversion of control]] container for the [[Java platform]].&lt;ref&gt;[http://www.springsource.org/features SpringSource Feature Tour]&lt;/ref&gt;

The first version was written by [[Rod Johnson (programmer)|Rod Johnson]], who released the framework with the publication of his book ''Expert One-on-One J2EE Design and Development'' in October 2002.  The framework was first released under the [[Apache License|Apache 2.0 license]] in June 2003. The first milestone release, 1.0, was released in March 2004, with further milestone releases in September 2004 and March 2005. The Spring 1.2.6 framework won a [[Jolt Awards|Jolt productivity award]] and a [[JAX Innovation Award]] in 2006.&lt;ref&gt;[http://www.ddj.com/architect/187900423?pgno=10 Jolt winners 2006]&lt;/ref&gt;&lt;ref&gt;[http://jax-award.de/jax_award06/gewinner_de.php JAX Innovation Award Gewinner 2006]&lt;/ref&gt; Spring 2.0 was released in October 2006, Spring 2.5 in November 2007, Spring 3.0 in December 2009, and Spring 3.1 in December 2011. The current version is 3.2.3, which was released in May 2013.&lt;ref&gt;[http://www.springsource.org/node/3791 | SpringSource.org]&lt;/ref&gt;  Spring Framework 4.0 is expected by the end of 2013,&lt;ref&gt;[http://blog.springsource.org/2013/01/16/next-stop-spring-framework-4-0/ | SpringSource.org]&lt;/ref&gt; with plans to support Java SE 8, [[Groovy (programming language) | Groovy]] 2, some aspects of Java EE7, and [[WebSocket | WebSockets]].

The core features of the Spring Framework can be used by any Java application, but there are extensions for building web applications on top of the [[Java EE]] platform. Although the Spring Framework does not impose any specific [[programming model]], it has become popular in the Java community as an alternative to, replacement for, or even addition to the [[Enterprise JavaBean]] (EJB) model.

==Modules==

The Spring Framework includes several modules that provide a range of services:

* '''[[Inversion of control]] container''': configuration of application components and lifecycle management of Java objects, done mainly via [[dependency injection]]
* '''[[Aspect-oriented programming]]''': enables implementing [[Cross-cutting concern|cross-cutting concerns]].
* '''[[Data access]]''': working with [[RDBMS|relational database management systems]] on the Java platform using [[JDBC]] and [[object-relational mapping]] tools and with [[NoSQL]] databases
* '''[[Transaction processing|Transaction management]]''': unifies several transaction management APIs and coordinates transactions for Java objects
* '''[[Model–view–controller]]''': an [[HTTP]]- and [[Java Servlet API|servlet]]-based framework providing hooks for extension and customization for web applications and [[REST]]ful web services.
* '''Remote access framework''': configurative [[Remote procedure call|RPC]]-style [[Marshalling (computer science)|marshalling]] of Java objects over networks supporting [[Java remote method invocation|RMI]], [[CORBA]] and [[HTTP]]-based protocols including [[web services]] ([[SOAP (protocol)|SOAP]])
* '''[[Convention over configuration]]''': a rapid application development solution for Spring-based enterprise applications is offered in the [[Spring Roo]] module
* '''[[Authentication]] and [[authorization]]''': configurable security processes that support a range of standards, protocols, tools and practices via the [[Spring Security]] sub-project (formerly ''Acegi Security System for Spring'').
* '''Remote management''': configurative exposure and management of Java objects for local or remote configuration via [[JMX]]
* '''Messaging''': configurative registration of message listener objects for transparent message-consumption from [[message queue]]s via [[Java Message Service|JMS]], improvement of message sending over standard JMS APIs
* '''[[Software testing|Testing]]''': support classes for writing unit tests and integration tests

===Inversion of control container (dependency injection)===
Central to the Spring Framework is its [[inversion of control]] container, which provides a consistent means of configuring and managing Java objects using [[Reflection (computer science)|reflection]]. The container is responsible for managing [[Object lifetime|object lifecycles]] of specific objects: creating these objects, calling their initialization methods, and configuring these objects by wiring them together.

Objects created by the container are also called ''managed objects'' or ''beans''. The container can be configured by loading XML files or detecting specific [[Java annotation]]s on configuration classes. These data sources contain the ''bean definitions'' which provide the information required to create the beans.

Objects can be obtained by means of either ''[[dependency lookup]]'' or ''[[dependency injection]]''.&lt;ref&gt;http://forum.springsource.org/showthread.php?79731-What-is-the-difference-between-the-depencylookup-and-dependency-injection&lt;/ref&gt; ''Dependency lookup'' is a pattern where a caller asks the container object for an object with a specific name or of a specific type. ''Dependency injection'' is a pattern where the container passes objects by name to other objects, via either [[constructor (computer science)|constructor]]s, [[Property (programming)|properties]], or [[Factory method pattern|factory methods]].

In many cases one need not use the container when using other parts of the Spring Framework, although using it will likely make an application easier to configure and customize. The Spring container provides a consistent mechanism to configure applications and integrates with almost all Java environments, from small-scale applications to large enterprise applications.

The container can be turned into a partially compliant [[EJB|EJB3]] container by means of the [http://www.springsource.com/web/guest/pitchfork Pitchfork] project. Some{{Who|date=May 2011}} criticize the Spring Framework for not complying with standards.&lt;ref&gt;
http://www.andygibson.net/blog/index.php/2008/08/28/is-spring-between-the-devil-and-the-ejb Spring VS EJB3&lt;/ref&gt; However, [http://www.springsource.com/ SpringSource] doesn't see EJB3 compliance as a major goal, and claims that the Spring Framework and the container allow for more powerful programming models.&lt;ref&gt;
{{cite web
| url = http://www.springsource.com/web/guest/pitchfork/pitchfork-faq
| title = Pitchfork FAQ
| accessdate = 2006-06-06}}
&lt;/ref&gt;
You do not create an object, but describe how they should be created, by defining in Spring Config file.
You do not call services and components, but tell which services and components must be called, by defining in spring configuration files.
This makes the code easy to maintain, and easier to test through IOC.

=== Aspect-oriented programming framework ===
The Spring Framework has its own [[Aspect-oriented programming|AOP]] framework which modularizes [[cross-cutting concern]]s in [[Aspect (computer science)|aspects]]. The motivation for creating a separate AOP framework comes from the belief that it would be possible to provide basic AOP features without too much complexity in either design, implementation, or configuration. The Spring AOP framework also takes full advantage of the Spring container.

The Spring AOP framework is [[Proxy pattern|proxy pattern-based]], and is configured at [[run time (program lifecycle phase)|run time]]. This removes the need for a compilation step or [[load-time weaving]]. On the other hand, interception only allows for public method-execution on existing objects at a [[join point]].

Compared to the [[AspectJ]] framework, Spring AOP is less powerful but also less complicated. Spring 1.2 includes support to configure AspectJ [[Aspect (computer science)|aspects]] in the container. Spring 2.0 added more integration with AspectJ; for example, the [[pointcut]] language is reused and can be mixed with Spring AOP-based aspects. Further, Spring 2.0 added a Spring Aspects library which uses AspectJ to offer common Spring features such as declarative transaction management and dependency injection via AspectJ compile-time or load-time weaving. [[SpringSource]] also uses AspectJ for AOP in other Spring projects such as [[Spring Roo]] and Spring Insight, with [[Spring Security]] also offering an AspectJ-based aspect library.

Spring AOP has been designed to make it able to work with cross-cutting concerns inside the Spring Framework. Any object which is created and configured by the container can be ''enriched'' using Spring AOP.

The Spring Framework uses Spring AOP internally for transaction management, security, remote access, and [[JMX]].

Since version 2.0 of the framework, Spring provides two approaches to the AOP configuration:

* schema-based approach and 
* @AspectJ-based annotation style.

The Spring team decided not to introduce new AOP-related terminology; therefore, in the Spring reference documentation and API, terms such as [[aspect (computer programming)|aspect]], [[join point]], [[Advice (computer science)|advice]], [[pointcut]], introduction, [[target object]] ([[advised object]]), [[AOP proxy]], and weaving all have the same meanings as in most other AOP frameworks (particularly [[AspectJ]]).

===Data access framework===
Spring's data access framework addresses common difficulties developers face when working with databases in applications. Support is provided for all popular data access frameworks in Java: [[JDBC]], [[IBATIS|iBatis]]/[[MyBatis]], [[Hibernate (Java)|Hibernate]], [[Java Data Objects|JDO]], [[Java Persistence API|JPA]], [[TopLink|Oracle TopLink]], [[Ojb|Apache OJB]], and [[Apache Cayenne]], among others.

For all of these supported frameworks, Spring provides these features

* '''Resource management''' - automatically acquiring and releasing database resources
* '''Exception handling''' - translating data access related exception to a Spring data access hierarchy
* '''Transaction participation''' - transparent participation in ongoing transactions
* '''Resource unwrapping''' - retrieving database objects from connection pool wrappers
* '''Abstraction''' for [[Binary large object|BLOB]] and [[Character large object|CLOB]] handling

All these features become available when using [[Template method pattern|''template'' classes]] provided by Spring for each supported framework. Critics have said these ''template'' classes are intrusive and offer no advantage over using (for example) the [[Hibernate (Java)|Hibernate]] API directly.&lt;ref&gt;http://houseofhaug.wordpress.com/2005/08/12/hibernate-hates-spring Hibernate VS Spring&lt;/ref&gt;{{Failed verification|date=January 2012}} In response, the Spring developers have made it possible to use the Hibernate and [[Java Persistence API|JPA]] APIs directly. This however requires transparent transaction management, as application code no longer assumes the responsibility to obtain and close database resources, and does not support exception translation.

Together with Spring's transaction management, its data access framework offers a flexible abstraction for working with data access frameworks. The Spring Framework doesn't offer a common data access API; instead, the full power of the supported APIs is kept intact. The Spring Framework is the only framework available in Java which offers managed data access environments outside of an application server or container.{{Citation needed|date=December 2007}}

While using Spring for transaction management with Hibernate, the following beans may have to be configured:
*A [[Datasource]] like &lt;code&gt;com.mchange.v2.c3p0.ComboPooledDataSource&lt;/code&gt; or &lt;code&gt;[http://commons.apache.org/dbcp/apidocs/org/apache/commons/dbcp/BasicDataSource.html org.apache.commons.dbcp.BasicDataSource]&lt;/code&gt;
*A SessionFactory like &lt;code&gt;[http://static.springsource.org/spring/docs/2.5.6/api/org/springframework/orm/hibernate3/LocalSessionFactoryBean.html org.springframework.orm.hibernate3.LocalSessionFactoryBean]&lt;/code&gt; with a DataSource attribute
*A HibernateProperties like &lt;code&gt;[http://static.springsource.org/spring/docs/2.5.6/api/org/springframework/beans/factory/config/PropertiesFactoryBean.html org.springframework.beans.factory.config.PropertiesFactoryBean]&lt;/code&gt;
*A TransactionManager like &lt;code&gt;[http://static.springsource.org/spring/docs/2.5.6/api/org/springframework/orm/hibernate3/HibernateTransactionManager.html org.springframework.orm.hibernate3.HibernateTransactionManager]&lt;/code&gt; with a SessionFactory attribute
Other points of configuration include:
*An AOP configuration of cutting points.
*{{clarify-span|Transaction semantics of AOP advice|date=February 2013}}.

===Transaction management framework===
Spring's transaction management framework brings an abstraction mechanism to the Java platform. Its abstraction is capable of:

* working with local and [[Distributed transaction|global transactions]] (local transaction does not require an [[application server]])
* working with [[nested transaction]]s
* working with [[savepoint]]s
* working in almost all environments of the [[Java platform]]

In comparison, [[Java Transaction API|JTA]] only supports [[nested transaction]]s and [[Distributed transaction|global transactions]], and requires an [[application server]] (and in some cases also deployment of applications in an application server).

The Spring Framework ships a [http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/transaction/PlatformTransactionManager.html ''PlatformTransactionManager''] for a number of transaction management strategies:

* Transactions managed on a [[JDBC]] ''Connection''
* Transactions managed on [[Object-relational mapping]] ''Units of Work''
* Transactions managed via the [[Java Transaction API|JTA]] ''TransactionManager'' and ''UserTransaction''
* Transactions managed on other resources, like [[object database]]s

Next to this abstraction mechanism the framework also provides two ways of adding transaction management to applications:

* Programmatically, by using Spring's [http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/transaction/support/TransactionTemplate.html ''TransactionTemplate'']
* Configuratively, by using [[metadata]] like XML or [[Java annotation]]s ([http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/transaction/annotation/Transactional.html @Transactional], [http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/transaction/annotation/package-summary.html etc])

Together with Spring's data access framework &amp;mdash; which integrates the transaction management framework &amp;mdash; it is possible to set up a transactional system through configuration without having to rely on [[Java Transaction API|JTA]] or [[EJB]]. The transactional framework also integrates with [[Java Message Service|messaging]] and [[Cache (computing)|caching]] engines.

=== Model-view-controller framework ===
The Spring Framework features its own [[Model-view-controller|MVC]] [[web application framework]], which wasn't originally planned. The Spring developers decided to write their own web framework as a reaction to what they perceived as the poor design of the (then) popular [[Jakarta Struts]] web framework,&lt;ref&gt;[http://www.theserverside.com/tt/articles/article.tss?l=SpringFramework Introduction to the Spring Framework]&lt;/ref&gt; as well as deficiencies in other available frameworks. In particular, they felt there was insufficient separation between the presentation and request handling layers, and between the request handling layer and the model.&lt;ref&gt;Johnson, Expert One-on-One J2EE Design and Development, Ch. 12. et al.&lt;/ref&gt;

Like Struts, Spring MVC is a request-based framework. The framework defines [[Strategy pattern|strategy]] interfaces for all of the responsibilities which must be handled by a modern request-based framework. The goal of each interface is to be simple and clear so that it's easy for Spring MVC users to write their own implementations if they so choose. MVC paves the way for cleaner front end code. All interfaces are tightly coupled to the [[Java Servlet|Servlet API]]. This tight coupling to the [[Java Servlet|Servlet API]] is seen by some as a failure on the part of the Spring developers to offer a high-level abstraction for web-based applications {{Citation needed|date=February 2007}}. However, this coupling makes sure that the features of the Servlet API remain available to developers while offering a high abstraction framework to ease working with said API.

The [http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/servlet/DispatcherServlet.html ''DispatcherServlet''] class is the [[Front Controller pattern|front controller]]&lt;ref&gt;Patterns of Enterprise Application Architecture: [http://www.martinfowler.com/eaaCatalog/frontController.html Front Controller]&lt;/ref&gt; of the framework and is responsible for delegating control to the various interfaces during the execution phases of a [[Hypertext Transfer Protocol|HTTP request]].

The most important interfaces defined by Spring MVC, and their responsibilities, are listed below:
* [http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/portlet/HandlerMapping.html HandlerMapping]: selecting objects that handle incoming requests (handlers) based on any attribute or condition internal or external to those requests
* [http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/portlet/HandlerAdapter.html HandlerAdapter]: execution of objects that handle incoming requests
* [http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/servlet/mvc/Controller.html Controller]: comes between Model and View to manage incoming requests and redirect to proper response. It acts as a gate that directs the incoming information. It switches between going into model or view.
* [http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/servlet/View.html View]: responsible for returning a response to the client. Some requests may go straight to view without going to the model part; others may go through all three.
* [http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/servlet/ViewResolver.html ViewResolver]: selecting a ''View'' based on a logical name for the view (use is not strictly required)
* [http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/portlet/HandlerInterceptor.html HandlerInterceptor]: interception of incoming requests comparable but not equal to [[Java Servlet|Servlet]] filters (use is optional and not controlled by ''DispatcherServlet'').
* [http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/servlet/LocaleResolver.html LocaleResolver]: resolving and optionally saving of the [[locale]] of an individual user
* [http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/multipart/MultipartResolver.html MultipartResolver]: facilitate working with file uploads by wrapping incoming requests

Each strategy interface above has an important responsibility in the overall framework. The abstractions offered by these interfaces are powerful, so to allow for a set of variations in their implementations, Spring MVC ships with implementations of all these interfaces and together offers a feature set on top of the [[Java Servlet|Servlet API]]. However, developers and vendors are free to write other implementations. Spring MVC uses the Java &lt;code&gt;java.util.Map&lt;/code&gt; interface as a data-oriented abstraction for the ''Model'' where keys are expected to be string values.

The ease of testing the implementations of these interfaces seems one important advantage of the high level of abstraction offered by Spring MVC. ''DispatcherServlet'' is tightly coupled to the Spring [[inversion of control]] container for configuring the web layers of applications. However, web applications can use other parts of the Spring Framework—including the container—and choose not to use Spring MVC.

===Remote access framework===
Spring's Remote Access framework is an abstraction for working with various RPC-based technologies available on the [[Java platform]] both for client connectivity and marshalling objects on servers. The most important feature offered by this framework is to ease configuration and usage of these technologies as much as possible by combining [[inversion of control]] and [[Aspect-oriented programming|AOP]].

The framework also provides fault-recovery (automatic reconnection after connection failure) and some optimizations for client-side use of {{clarify-span|[[EJB]] remote stateless session beans|date=February 2013}}.

Spring provides support for these protocols and products out of the box:

* '''[[Hypertext Transfer Protocol|HTTP]]-based protocols'''
** [[Hessian (web service protocol)|Hessian]]: binary serialization protocol, open-sourced and maintained by [[Common Object Request Broker Architecture|CORBA]]-based protocols'''
** [[Java remote method invocation|RMI]] (1): method invocations using RMI infrastructure yet specific to Spring
** [[Java remote method invocation|RMI]] (2): method invocations using RMI interfaces complying with regular RMI usage
** [[RMI-IIOP]] ([[Common Object Request Broker Architecture|CORBA]]): method invocations using RMI-IIOP/CORBA
* '''[[Enterprise JavaBean]] client integration'''
** Local [[EJB]] stateless session bean connectivity: connecting to local stateless session beans
** Remote EJB stateless session bean connectivity: connecting to remote stateless session beans
* '''[[SOAP (protocol)|SOAP]]'''
** Integration with the [[Apache Axis]] web services framework

[[Apache CXF]] provides integration with the Spring Framework for RPC-style exporting of object on the server side.

Both client and server setup for all RPC-style protocols and products supported by the Spring Remote access framework (except for the [[Apache Axis]] support) is configured in the Spring Core container.

There is alternative open-source implementation ([http://www.soft-amis.com/cluster4spring/index.html Cluster4Spring]) of a remoting subsystem included into Spring Framework which is intended to support various schemes of remoting (1-1, 1-many, dynamic services discovering).....

=== Convention-over-configuration rapid application development ===

[[Spring Roo]] is Spring's [[Convention over configuration|convention-over-configuration]] solution for rapidly building applications in [[Java (programming language)|Java]]. It currently supports Spring Framework, [[Spring Security]] and [[Spring Web Flow]], with remaining Spring projects scheduled to be added in due course. Roo differs from other [[rapid application development]] frameworks by focusing on:

* Java platform productivity (as opposed to other languages)
* Usability (particularly via the shell features and usage patterns)
* Runtime avoidance (with associated deployment advantages)
* Lock-in avoidance (Roo can be removed within a few minutes from any application)
* Extensibility (via add-ons)

===Batch framework===
[[Spring Batch]] is a framework for [[batch processing]] that provides reusable functions that are essential in processing large volumes of records, including:
*logging/tracing
*transaction management
*job processing statistics
*job restart
*skip
*resource management
It also provides more advanced technical services and features that will enable extremely high-volume and high performance batch jobs through optimizations and partitioning techniques.

===Integration framework===
[[Spring Integration]] is a framework for [[Enterprise application integration]] that provides reusable functions that are essential in messaging, or event-driven architectures.
*routers
*transformers
*adapters to integrate with other technologies and systems ([[HTTP]], [[AMQP]], [[Java Message Service|JMS]], [[XMPP]], [[SMTP]], [[IMAP]], [[FTP]] (as well as FTPS/SFTP), file systems, etc.)
*filters
*service activators
*management and auditing
Spring Integration supports pipe-and-filter based architectures.

==Criticisms==
{{Expand section|date=January 2013}}
Spring framework lacks certain features which more modern frameworks take for granted{{Citation needed|date=January 2013}}. One point of criticism is the syntax needed for Generics, although that is expected to improve with Spring Framework 4.0, which will include full support for the [[Groovy (programming language) | Groovy programming language]].

==See also==
{{Portal|Free software}}
* [[Google Guice]]
* [[Apache HiveMind]]
* [[Spring Web Flow]]
* [[Gemstone (database)]]

==References==
{{Reflist|35em}}

==Bibliography==
{{Refbegin}}
*{{cite book
 | last1 = Mak
 | first1 = Gary
 | title = Spring Recipes: A Problem-Solution Approach 
 | publisher = [[Apress]]
 | edition = Second
 | date = September 1, 2010
 | pages = 1104
 | isbn = 1-4302-2499-1
 | url = 
}}
*{{cite book
 | last1 = Walls
 | first1 = Craig
 | title = Spring in Action
 | publisher = [[Manning]]
 | edition = Third
 | date = November 28, 2010
 | pages = 700
 | isbn = 1-935182-35-8
 | url = 
}}
*{{cite book
 | last1 = Walls
 | first1 = Craig
 | first2 = Ryan
 | last2 = Breidenbach
 | title = Spring in Action
 | publisher = [[Manning]]
 | edition = Second
 | date = August 16, 2007
 | pages = 650
 | isbn = 1-933988-13-4
 | url = 
}}
*{{cite book
 | first1 = Rod
 | last1 = Johnson
 | first2 = Jürgen
 | last2 = Höller
 | first3 = Alef
 | last3 = Arendsen
 | first4 = Thomas
 | last4 = Risberg
 | first5 = Colin
 | last5 = Sampaleanu
 | title = Professional Java Development with the Spring Framework
 | publisher = [[Wrox Press]]
 | date = July 8, 2005
 | pages = 672
 | edition = First
 | isbn = 0-7645-7483-3
 | url = http://eu.wiley.com/WileyCDA/WileyTitle/productCd-0764574833.html
}}
*{{cite book
 | first1 = Rob
 | last1 = Harrop
 | first2 = Jan
 | last2 = Machacek
 | title = Pro Spring
 | publisher = [[Apress]]
 | date = January 31, 2005
 | edition = First
 | isbn = 1-59059-461-4
 | pages = 832
 | url = http://www.apress.com/book/view/1590594614
}}
*{{cite book
 | last1 = Johnson
 | first1 = Rod
 | last2 = Jürgen
 | first2 = Höller
 | title = J2EE Development without EJB
 | publisher = [[Wrox Press]]
 | date = October 23, 2002
 | isbn = 0-7645-5831-5
 | pages = 768
 | edition = First
 | url = http://eu.wiley.com/WileyCDA/WileyTitle/productCd-0764558315.html
}}
*{{cite book
 | last = Johnson
 | first = Rod
 | title = Expert One-on-one J2EE Design and Development
 | publisher = [[Wrox Press]]
 | date = October 2002
 | edition = First
 | isbn = 0-7645-4385-7
 | pages = 750
 | url = http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764543857.html
}}
*{{cite book
 | last1 = Sarin
 | first1 = Ashish
 | title = Getting started with Spring Framework
 | publisher = [[Self-published]]
 | edition = First
 | date = December 10, 2012
 | pages = 324
 | isbn = 978-1480013971
 | url = http://www.amazon.com/dp/1480013978
}}
{{Refend}}

==External links==

{{wikibooks|Java Programming|Spring framework}}
* [http://www.springsource.org/ Spring Framework]
* [http://www.springactionscript.org Spring ActionScript]
* [http://static.springsource.org/spring-batch/ Spring Batch]
* [http://static.springsource.org/spring/docs/current/spring-framework-reference/html/ The Spring Framework - Reference Documentation]
* [http://javadepend.wordpress.com/2011/10/26/spring-the-art-of-using-grasp-patterns/ Spring: The art of using GRASP Patterns]
* [http://wiki.magnolia-cms.com/display/WIKI/Magnolia+Blossom Blossom: Spring Framework integration module for Magnolia CMS]
* [http://r4r.co.in/java/spring/Basic Spring Tutorials concept with Spring Examples]
* [http://www.camelcode.org/Spring-tutorials.htm Spring framework tutorials]
*[http://www.javatips.net/blog/2011/12/spring-tutorial Spring Tutorial]
*[http://www.javatips.net/blog/2011/12/spring-jdbc-template Spring Jdbc Template]

[[Category:Java enterprise platform]]
[[Category:Web application frameworks]]
[[Category:Aspect-oriented programming]]</text>
      <sha1>tg3n7idum6xqags4fmlw4ml7b9s4shh</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>