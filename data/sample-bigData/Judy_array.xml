<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>Judy array</title>
    <ns>0</ns>
    <id>484569</id>
    <revision>
      <id>550361627</id>
      <parentid>540056775</parentid>
      <timestamp>2013-04-14T20:23:26Z</timestamp>
      <contributor>
        <ip>72.130.136.214</ip>
      </contributor>
      <comment>/* External links */ size of implementation is now 1250 LOC on google code.</comment>
      <text xml:space="preserve">In [[computer science]] and [[software engineering]], a '''Judy array''' is a [[data structure]] that has high performance, low memory usage and implements an [[associative array]]. Unlike normal arrays, Judy arrays may be sparse, that is, they may have large ranges of unassigned indices. They can be used for storing and looking up values using integer or string keys. The key benefits of using a Judy array is its scalability, high performance, memory efficiency and ease of use.&lt;ref&gt;http://packages.debian.org/lenny/libjudy-dev&lt;/ref&gt;

Judy arrays are both speed- and memory-efficient, with no tuning or configuration required and therefore they can replace common data structures ([[skip lists]], [[linked lists]], binary, ternary, b-trees, [[hash function|hashing]]) and work better with very large data sets.

Roughly speaking, it is similar to a highly-optimised 256-ary [[trie]] data structure.&lt;ref&gt;Alan Silverstein, "[http://judy.sourceforge.net/application/shop_interm.pdf Judy IV Shop Manual]", 2002&lt;/ref&gt; To make memory consumption small, Judy arrays use over 20 different compression techniques to compress trie nodes.

The Judy array was invented by Douglas Baskins and named after his sister.&lt;ref&gt;http://judy.sourceforge.net/&lt;/ref&gt;

==Terminology==
Expanse, population and density are commonly used when it comes to Judy arrays. As they are not commonly used in tree search literature, it is important to define them:

# ''Expanse'' is a range of possible keys, e.g. 200, 300, etc.
# ''Population'' is the count of keys contained in an expanse, e.g. a population of 5 could be the keys 200, 360, 400, 512, and 720
# ''Density'' is used to describe the sparseness of an expanse of keys: Density = Population/Expanse

==Benefits==

===Memory allocation===
Judy arrays are designed to be unbounded arrays and therefore their sizes are not pre-allocated. They can dynamically choose to grow or shrink the memory used according to the population of the array and can scale to a large number of elements. Since it allocates memory dynamically as it grows, it is only bounded by machine memory.&lt;ref&gt;Advances in databases: concepts, systems and applications : By Kotagiri Ramamohanarao&lt;/ref&gt; The memory used by Judy arrays is nearly proportional to the number of elements (population) in the Judy array.

===Speed===
Judy arrays are designed to keep the number of processor [[cache-line]] fills as low as possible, and the algorithm is internally complex in an attempt to satisfy this goal as often as possible. Due to these [[CPU cache|cache]] optimizations, Judy arrays are fast, sometimes even faster than a [[hash table]], especially for very big datasets. Despite Judy arrays being a type of [[trie]], they consume much less memory than hash tables. Also because a Judy array is a trie, it is possible to do an ordered sequential traversal of keys, which is not possible in hash tables.

==Drawbacks==
The HP (SourceForge) implementation of Judy arrays appears to be the subject of US patent 6735595.&lt;ref&gt;http://www.google.com/patents/US6735595&lt;/ref&gt;

==References==
{{reflist}}

==External links==
*[http://judy.sourceforge.net/ Main Judy arrays site]
*[http://judy.sourceforge.net/downloads/10minutes.htm How Judy arrays work and why they are so fast]
*[http://judy.sourceforge.net/application/shop_interm.pdf A complete technical description of Judy arrays]
*[http://www.nothings.org/computer/judy/ An independent performance comparison of Judy to Hash Tables]
*[http://code.google.com/p/judyarray A compact implementation of Judy arrays in 1250 lines of C code]

[[Category:Arrays]]</text>
      <sha1>23bwttgh79efl8rncapjkq7x7d4mgxe</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>