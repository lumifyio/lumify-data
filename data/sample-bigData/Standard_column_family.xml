<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>Standard column family</title>
    <ns>0</ns>
    <id>31330934</id>
    <revision>
      <id>560672474</id>
      <parentid>548420791</parentid>
      <timestamp>2013-06-19T22:41:14Z</timestamp>
      <contributor>
        <username>Ravi.gorrepati</username>
        <id>19215686</id>
      </contributor>
      <comment>/* Standard column families vs. rows */</comment>
      <text xml:space="preserve">[[Image:ColumnFamily (data store).png|220px|thumb|A standard column family consists of a (unique) row key and a number of [[Column (data store)|column]]s.]]
The '''standard column family''' is a [[NoSQL (concept)|NoSQL]] object that contains [[Column (database)|column]]s of related data. It is a [[tuple]] (pair) that consists of a [[key-value pair]], where the key is mapped to a value that is a set of columns. In analogy with relational databases, a standard column family is as a "table", each key-value pair being a "row".&lt;ref&gt;{{cite web
| accessdate = 2011-03-18
| publisher = Max's Output
| title = Column Families 101
| url = http://wiki.toadforcloud.com/index.php/Column_Families_101}}&lt;/ref&gt; Each column is a [[tuple]] ([[triplet]]) consisting of a column name, a value, and a [[timestamp]].&lt;ref&gt;{{cite web
| accessdate = 2011-03-18
| author = Max's Output
| publisher = Max Grinev
| title = A Quick Introduction to the Cassandra Data Model: 1) Cassandra is based on a key-value model
| quote = A standard column family is a set of key-value pairs. I know the terminology is confusing but so far it is just basic key-value model. Drawing an analogy with relational databases, you can think about standard column family as table and a key-value pair as a record in a table.
| url = http://maxgrinev.com/2010/07/09/a-quick-introduction-to-the-cassandra-data-model/}}&lt;/ref&gt; In a [[Relational database|relational]] [[database table]], this data would be grouped together within a table with other non-related data.&lt;ref&gt;{{cite web
| accessdate = 2011-03-18
| publisher = Toad for Cloud
| title = Column Families 101
| url = http://wiki.toadforcloud.com/index.php/Column_Families_101}}&lt;/ref&gt;

Standard column families are column containers sorted by their names can be referenced and sorted by their row key.&lt;ref&gt;{{cite web
| accessdate = 2011-03-29
| location = http://www.javageneration.com/
| publisher = Chaker Nakhli's Blog - Yet another technical blog.
| title = Cassandra’s data model cheat sheet: standard column family
| quote = A container for columns sorted by their names. Column Families are referenced and sorted by row keys.
| url = http://www.javageneration.com/?p=70}}&lt;/ref&gt;

==Benefits==
Accessing the data in a [[Distributed computing|distributed]] [[data store]] would be expensive (time-consuming), if it would be saved in form of a table. It would also be inefficient to read all column families that would make up a row in a relational table and put it together to form a row, as the data for it is distributed on a large number of [[Node (networking)|nodes]]. Therefore, the user accesses only the related information required.

As an example, a relational table could consist of the columns UID, first name, surname, birthdate, gender, etc. In a distributed data store, the same table would be implemented by creating columns families for "UID, first name, surname", "birthdate, gender", etc. If one needs only the males that were born between 1950 and 1960, for a query in the relational database, all the table has to be read. In a distributed data store, it suffices to access only the second standard column family, as the rest of information is irrelevant.

==Sorting and querying==

There is no way to sort columns, nor to [[Query language|query]] an arbitrary query in [[distributed data store]]s. Columns are sorted when they are added to the column family. The way of sorting is defined by an attribute. For instance, this is done by the &lt;code&gt;CompareWith&lt;/code&gt; attribute in [[Apache Cassandra]] that can have the following values:
* &lt;code&gt;AsciiType&lt;/code&gt;
* &lt;code&gt;BytesType&lt;/code&gt;
* &lt;code&gt;LexicalUUIDType&lt;/code&gt;
* &lt;code&gt;LongType&lt;/code&gt;
* &lt;code&gt;TimeUUIDType&lt;/code&gt;
* &lt;code&gt;UTF8Type&lt;/code&gt;

It is also possible to add some user-defined sorting attributes. Using this way of sorting makes the process extremely quick.&lt;ref&gt;{{cite web
| accessdate = 2011-03-30
| location = http://www.sodeso.nl/
| publisher = Sodeso - Software Development Solutions
| title = Installing and using Apache Cassandra With Java Part 3 (Data model 2)
| quote = Sorting can be specified on the ColumnFamily CompareWith attribute, these are the options you can choose from (it is possible to create custom sorting behavior but we will cover that later): BytesType, UTF8Type, LexicalUUIDType, TimeUUIDType, AsciiType, LongType
| url = http://www.sodeso.nl/?p=207}}&lt;/ref&gt;

==Standard column families vs. rows==

Standard column families have a [[schema-less]] nature so that each of their "row"s can contain a different number of columns, and even different column names could be in each row.&lt;ref name="QuickTour"&gt;{{cite web 
| accessdate = 2011-03-25
| author = Posted by Terry
| date = 2010-03-22
| publisher = Terry.Cho's blog
| title = Apache Cassandra Quick tour
| quote = One of interest thing is each row can have different scheme. Cassandra row has “emailAddress” ,”age” column. TerryCho row has “emailAddress”,”gender” column. This characteristic is called as “Schemeless” (Data structure of each row in standard column family can be different).
| url = http://javamaster.wordpress.com/2010/03/22/apache-cassandra-quick-tour/}}&lt;/ref&gt; So, they are a very different concept than the rows in [[relational database management system|relational database management system (RDBMS)]]s. This is one of the reasons why the concept is not trivial for an experienced RDBMS expert.

==Examples==

In [[JSON|JSON-like]] notation, a column family definition would look as follows:&lt;ref name="QuickTour"/&gt;

&lt;source lang="sql"&gt;
UserProfile = {
 Cassandra = { emailAddress:”casandra@apache.org” , age:”20”}
 TerryCho = { emailAddress:”terry.cho@apache.org” , gender:”male”}
 Cath = { emailAddress:”cath@apache.org” , age:”20”,gender:”female”,address:”Seoul”}
 }
&lt;/source&gt;

where "Cassandra", "TerryCho", "Cath" correspond the row keys; and "emailAddress", "age", "gender", "address" correspond to the column names.

==References==
{{reflist}}

==See also==
* [[Column (data store)]]
* [[Column family]]

==External links==
* [http://blog.insidesystems.net/understanding-the-cassandra-data-model-from-a The Apache Cassandra data model]

&lt;!--Categories--&gt;
[[Category:Distributed data stores]]
[[Category:NoSQL]]

&lt;!--Interwikies--&gt;</text>
      <sha1>725c3wkzlkpr4z7t75o8obuj02j6zjj</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>