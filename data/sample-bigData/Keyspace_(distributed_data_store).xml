<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>Keyspace (distributed data store)</title>
    <ns>0</ns>
    <id>31319750</id>
    <revision>
      <id>485132416</id>
      <parentid>460344242</parentid>
      <timestamp>2012-04-02T09:32:58Z</timestamp>
      <contributor>
        <username>Khiladi 2010</username>
        <id>16247915</id>
      </contributor>
      <minor></minor>
      <comment>Edited Keyspace (data store) out of See Also since it didn't have any Wikipedia page behind it.</comment>
      <text xml:space="preserve">[[Image:Keyspace example (data store).png|500px|thumb|A keyspace example with a number of column families.]]
A '''key space''' (or '''keyspace''') in a [[NoSQL (concept)|NoSQL]] [[data store]] is an object that holds together all [[column family|column families]] of a design.&lt;ref&gt;{{cite web
| accessdate = 2011-03-28
| author = Ronald Mathies
| date = 2010-03-18
| location = http://www.sodeso.nl/
| publisher = Sodeso - Software Development Solutions
| title = Installing and using Apache Cassandra With Java Part 2 (Data model): Keyspaces 
| quote = Keyspaces are quite simple again, from an RDBMS point of view you can compare this to your schema, normally you have one per application. A keyspace contains the ColumnFamilies. Note, however, there is no relationship between the ColumnFamilies. They are just separate containers.
| url = http://www.sodeso.nl/?p=108}}&lt;/ref&gt;&lt;ref&gt;{{cite web
| accessdate = 2011-03-31
| location = http://wiki.apache.org/cassandra/API
| publisher = Cassandra Wiki
| title = Overview: Terminology/Abbreviations: Keyspace:
| quote = [A Keyspace] Contains multiple Column Families.
| url = http://wiki.apache.org/cassandra/API}}&lt;/ref&gt; It is the outer most grouping of the data in the data store.&lt;ref&gt;{{cite web
| accessdate = 2011-03-25
| author = Arin Sarkissian
| date = 2010-08-23
| location = http://arin.me/blog/
| publisher = Arin Sarkissian's blog
| title = WTF is a SuperColumn? An Intro to the Cassandra Data Model 
| quote = A Keyspace is the outer most grouping of your data. All your ColumnFamily‘s go inside a Keyspace. Your Keyspace will probably named after your application.
| url = http://arin.me/blog/wtf-is-a-supercolumn-cassandra-data-model}}&lt;/ref&gt; It resembles to the [[Schema (database)|schema]] concept in [[Relational database management system]]s.&lt;ref name="terminology"&gt;{{cite web
| accessdate = 2011-03-25
| author = Guy Harrison
| date = 2010-08-23
| location = http://guyharrison.squarespace.com/
| publisher = Guy Harrison's Web bits
| title = Playing with Cassandra and Oracle |quote = Terminology in NoSQL 
| quote = In Cassandra:
* A Keyspace is like a schema
* ColumnFamily is roughly like a table
It can be confusing, with each NoSQL database using terms differently from each other, and all of them using terms differently from RDBMS.
| url = http://guyharrison.squarespace.com/blog/2010/8/23/playing-with-cassandra-and-oracle.html}}&lt;/ref&gt; Generally, there is one keyspace per application.&lt;ref&gt;{{cite web 
| accessdate = 2011-03-28
| location = http://nosql.mypopescu.com/
| publisher = myNoSQL
| title = Tutorial: Getting Started With Cassandra
| quote = Keyspaces are quite simple again, from an RDBMS point of view you can compare this to your schema, normally you have one per application. A keyspace contains the ColumnFamilies. Note however there is no relationship between the ColumnFamiliies, they are just separate containers.
| url = http://guyharrison.squarespace.com/blog/2010/8/23/playing-with-cassandra-and-oracle.html}}&lt;/ref&gt;

==Structure==
A keyspace may contain [[column families]] or [[super column]]s. Each super column contains one or more column family, each column familie at least one column. The keyspace is the highest abstraction in a [[distributed data store]].

==Comparison with relational database systems==
The keyspace has similar importance like a [[Schema (database)|schema]] has in a database. In contrast to the schema, however, it does not stipulate any concrete structure, like it is known in the [[entity-relationship model]] used widely in the [[relational data model]]s. For instance, the contents of the keyspace can be column families, each having different number of columns, or even different columns. So, the column families that somehow relate to the [[Row (database)|row]] concept in relational databases do not stipulate any fixed structure. The only point that is the same with a schema is that it also contains a number of "objects", which are tables in RDBMS systems and here column families or super columns.

So, in distributed data stores, the whole burden to handle rows that may even change from data-store update to update lies on the shoulders of the programmers.

==Examples==

As an example, we show a number of column families in a keyspace. The &lt;code&gt;CompareWith&lt;/code&gt; keyword defines how the column comparison is made. In the example, the [[UTF8]] standard has been selected. Other ways of comparison exist, such as &lt;code&gt;AsciiType&lt;/code&gt;, &lt;code&gt;BytesType&lt;/code&gt;, &lt;code&gt;LongType&lt;/code&gt;, &lt;code&gt;TimeUUIDType&lt;/code&gt;.
&lt;source lang="sql"&gt;
&lt;Keyspace Name="DeliciousClone"&gt;
  &lt;KeysCachedFraction&gt;0.01&lt;/KeysCachedFraction&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" Name="Users"/&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" Name="Bookmarks"/&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" Name="Tags"/&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" Name="UserTags"/&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" CompareSubcolumnsWith="TimeUUIDType" ColumnType="Super" Name="UserBookmarks"/&gt;
&lt;/Keyspace&gt;
&lt;/source&gt;

Another example shows a simplified [[Twitter]] clone data model:

&lt;source lang="sql"&gt;
&lt;Keyspace Name="TwitterClone"&gt;
  &lt;KeysCachedFraction&gt;0.01&lt;/KeysCachedFraction&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" Name="Users" /&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" Name="UserAudits" /&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" CompareSubcolumnsWith="TimeUUIDType" ColumnType="Super" Name="UserRelationships" /&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" Name="Usernames" /&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" Name="Statuses" /&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" Name="StatusAudits" /&gt;
  &lt;ColumnFamily CompareWith="UTF8Type" CompareSubcolumnsWith="TimeUUIDType" ColumnType="Super" Name="StatusRelationships" /&gt;
&lt;/Keyspace&gt;
&lt;/source&gt;

==See also==
* [[Column family|Column families]]
* [[NoSQL (concept)|NoSQL]]
* [[Schema (database)]]

==References==
{{reflist}}

==External links==
* [http://schabby.de/cassandra-getting-started/ Cassandra – Getting Started (Java)]
* [http://nosql.mypopescu.com/post/573604395/tutorial-getting-started-with-cassandra Tutorial - Getting started with Cassandra]

&lt;!--Interwikies--&gt;
&lt;!--Until now, no articles in other languages exist--&gt;

&lt;!--Categories--&gt;
[[Category:Distributed data stores]]
[[Category:NoSQL]]</text>
      <sha1>mtaqpxs6a5uaue4c56wr75s01orwj36</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>