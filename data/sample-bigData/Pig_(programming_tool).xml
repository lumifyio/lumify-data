<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>Pig (programming tool)</title>
    <ns>0</ns>
    <id>29417433</id>
    <revision>
      <id>557659307</id>
      <parentid>553434663</parentid>
      <timestamp>2013-05-31T09:53:03Z</timestamp>
      <contributor>
        <username>Topbanana</username>
        <id>20151</id>
      </contributor>
      <comment>Repair citation</comment>
      <text xml:space="preserve">'''Pig'''
&lt;ref name="mainpage"&gt;{{cite web |url=http://pig.apache.org/|title=Hadoop: Apache Pig|accessdate=Sep 2, 2011}}&lt;/ref&gt;
is a high-level platform for creating [[MapReduce]] programs used with [[Hadoop]]. The language for this platform is called '''Pig Latin'''.&lt;ref name="mainpage"/&gt;  Pig Latin abstracts the programming from the [[Java (programming language)|Java]] MapReduce idiom into a notation which makes MapReduce programming high level, similar to that of [[SQL]] for [[RDBMS]] systems. Pig Latin can be extended using UDF (User Defined Functions) which the user can write in Java, [[Python (programming language)|Python]], [[JavaScript]], [[Ruby (programming language)|Ruby]] or [[Groovy (programming language)|Groovy]] &lt;ref&gt;{{cite web|url= http://pig.apache.org/docs/r0.11.1/udf.html|title=Pig user defined functions|accessdate=May 3,2013}}&lt;/ref&gt; and then call directly from the language.

Pig was originally &lt;ref&gt;{{cite web |url=http://developer.yahoo.com/blogs/hadoop/posts/2008/10/pig_-_the_road_to_an_efficient_high-level_language_for_hadoop/|title=Yahoo Blog:Pig – The Road to an Efficient High-level language for Hadoop|accessdate=Nov 1, 2010}}&lt;/ref&gt; developed at [[Yahoo]] Research around 2006 for researchers to have an ad-hoc way of creating and executing map-reduce jobs on very large data sets. In 2007,&lt;ref&gt;{{cite web |url=http://developer.yahoo.com/blogs/hadoop/posts/2007/11/pig_into_incubation/|title=Pig into Incubation at the Apache Software Foundation|accessdate=Nov 1, 2010}}&lt;/ref&gt; it was moved into the [[Apache Software Foundation]].&lt;ref&gt;{{cite web |url=http://apache.org/|title=The Apache Software Foundation|accessdate=Nov 1, 2010}}&lt;/ref&gt;

==Example==
Below is an example of a "[[word count|Word Count]]" program in Pig Latin

&lt;source lang="text"&gt;
input_lines = LOAD '/tmp/my-copy-of-all-pages-on-internet' AS (line:chararray);

-- Extract words from each line and put them into a pig bag
-- datatype, then flatten the bag to get one word on each row
words = FOREACH input_lines GENERATE FLATTEN(TOKENIZE(line)) AS word;

-- filter out any words that are just white spaces
filtered_words = FILTER words BY word MATCHES '\\w+';

-- create a group for each word
word_groups = GROUP filtered_words BY word;

-- count the entries in each group
word_count = FOREACH word_groups GENERATE COUNT(filtered_words) AS count, group AS word;

-- order the records by count
ordered_word_count = ORDER word_count BY count DESC;
STORE ordered_word_count INTO '/tmp/number-of-words-on-internet';
&lt;/source&gt;
The above program will generate parallel executable tasks which can be distributed across multiple machines in a Hadoop cluster to count the number of words in a dataset such as "all the webpages on the internet".

==Pig vs SQL==
Some of the differences between Pig and SQL include Pig's usage of [[lazy evaluation]], Pig's usage for [[Extract, transform, load|ETL]], Pig's ability to store data at any point during a [[Pipeline (software)|pipeline]], Pig's explicit declaration of execution plans, and Pig's support for pipeline splits. On the other hand, it has been argued [[DBMS]]s are substantially faster than the MapReduce system once the data is loaded, but that loading the data takes considerably longer in the database systems. It has also been argued [[Relational database management system|RDBMS]]s offer out of the box support for column-storage, working with compressed data, indexes for efficient random data access, and transaction-
level fault tolerance.&lt;ref&gt;[http://database.cs.brown.edu/papers/stonebraker-cacm2010.pdf Communications of the ACM: MapReduce and Parallel DBMSs: Friends or Foes?]&lt;/ref&gt;

Pig Latin is [[Procedural programming|procedural]] and fits very naturally in the pipeline paradigm while SQL is instead [[Declarative programming|declarative]]. In SQL users can specify that data from two tables must be joined, but not what join implementation to use. Pig Latin allows users to specify an implementation or aspects of an implementation to be used in executing a script in several ways.&lt;ref name = ypgd /&gt; In effect, Pig Latin programming is similar to specifying a query execution plan, making it easier for programmers to explicitly control the flow of their data processing task.&lt;ref&gt;[http://infolab.stanford.edu/~olston/publications/sigmod08.pdf ACM SigMod 08: Pig Latin: A Not-So-Foreign Language for Data Processing]&lt;/ref&gt;

SQL is oriented around queries that produce a single result. SQL handles trees naturally, but has no built in mechanism for splitting a data processing stream and applying different operators to each sub-stream. Pig Latin script describes a [[directed acyclic graph]] (DAG) rather than a pipeline.&lt;ref name = ypgd /&gt;

Pig Latin's ability to include user code at any point in the pipeline is useful for pipeline development. If SQL is used, data must first be imported into the database, and then the cleansing and transformation process can begin.&lt;ref name = ypgd&gt;[http://developer.yahoo.com/blogs/hadoop/posts/2010/01/comparing_pig_latin_and_sql_fo/ Yahoo Pig Development Team: Comparing Pig Latin and SQL for Constructing Data Processing Pipelines]&lt;/ref&gt;

==See also==
* [[Apache Hive]]
* [[Sawzall (programming language)|Sawzall]] — similar tool from Google

==References==
{{reflist}}

==External links==
*[http://pig.apache.org/ Official site]

{{Apache}}

[[Category:Cloud computing]]
[[Category:Query languages]]
[[Category:Data modeling languages]]
[[Category:Hadoop]]</text>
      <sha1>6fxx06zt5ivzqwptrn7ypwn19kumn7z</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>