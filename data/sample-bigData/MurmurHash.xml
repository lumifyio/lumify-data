<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>MurmurHash</title>
    <ns>0</ns>
    <id>25081196</id>
    <revision>
      <id>558509207</id>
      <parentid>556661945</parentid>
      <timestamp>2013-06-05T21:43:48Z</timestamp>
      <contributor>
        <username>KevinFixesThings</username>
        <id>18171903</id>
      </contributor>
      <minor></minor>
      <comment>/* Algorithm */ Added notes to clarify endian swapping, and overflow treatment.</comment>
      <text xml:space="preserve">{{Use dmy dates|date=January 2012}}
'''MurmurHash''' is a non-[[Cryptographic hash function|cryptographic]] [[hash function]] suitable for general hash-based lookup.&lt;ref name="Hadoop"&gt;{{cite web|url=http://hbase.apache.org/docs/current/api/org/apache/hadoop/hbase/util/MurmurHash.html |title=Hadoop in Java |publisher=Hbase.apache.org |date=24 July 2011 |accessdate=13 January 2012}}&lt;/ref&gt;&lt;ref&gt;[http://laboratorios.fi.uba.ar/lsi/chouza-tesisingenieriainformatica.pdf Chouza et al].&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.inesc-id.pt/ficheiros/publicacoes/5453.pdf |title=Couceiro et al. |format=PDF |language={{pt icon}} |accessdate=13 January 2012}}&lt;/ref&gt;  It was created by Austin Appleby in 2008,&lt;ref&gt;{{cite web|url=http://murmurhash.googlepages.com/ |title=MurmurHash on GooglePages |publisher=Murmurhash.googlepages.com |accessdate=13 January 2012}}&lt;/ref&gt;&lt;ref&gt;{{cite web|author=Tanjent (tanjent) wrote,3 March 2008 13:31:00 |url=http://tanjent.livejournal.com/756623.html |title=MurmurHash first announcement |publisher=Tanjent.livejournal.com |accessdate=13 January 2012}}&lt;/ref&gt; and exists in a number of variants,&lt;ref name="Murmur160"&gt;{{cite web|url=http://simonhf.wordpress.com/2010/09/25/murmurhash160/ |title=MurmurHash2-160 |publisher=Simonhf.wordpress.com |date=25 September 2010 |accessdate=13 January 2012}}&lt;/ref&gt; all of which have been released into the public domain. When compared to other popular hash functions, MurmurHash performed well in a random distribution of regular keys.&lt;ref name="StackExchange"&gt;{{cite web|url=http://programmers.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed |publisher=stackexchange.com |title=Which hashing algorithm is best for uniqueness and speed}}&lt;/ref&gt;

==Variants==

The current version is MurmurHash3,&lt;ref&gt;{{cite web|title=MurmurHash3 on smhasher|url=http://code.google.com/p/smhasher/wiki/MurmurHash3}}&lt;/ref&gt;&lt;ref name="Horvath"&gt;{{cite web | first = Adam | last = Horvath | url = http://blog.teamleadnet.com/2012/08/murmurhash3-ultra-fast-hash-algorithm.html | title = MurMurHash3, an ultra fast hash algorithm for C# / .NET | date = Aug 10, 2012 }}&lt;/ref&gt; which yields a 32-bit or 128-bit hash value.

The older MurmurHash2&lt;ref&gt;{{cite web|title=MurmurHash2 on smhasher|url=http://code.google.com/p/smhasher/wiki/MurmurHash2}}&lt;/ref&gt; yields a 32-bit or 64-bit value. Slower versions of MurmurHash2 are available for big-endian and aligned-only machines.  The MurmurHash2A variant adds the [[Merkle–Damgård construction]] so that it can be called incrementally. There are two variants which generate 64-bit values; MurmurHash64A, which is optimized for 64-bit processors, and MurmurHash64B, for 32-bit ones. MurmurHash2-160 generates the 160-bit hash, and MurmurHash1 is obsolete.

==Implementations==

The canonical implementation is in [[C++]], but there are efficient ports for a variety of popular languages, including [[Python (programming language)|Python]],&lt;ref&gt;{{cite web|url=http://code.google.com/p/pyfasthash/ |title=pyfasthash in Python |publisher=Google |accessdate=13 January 2012}}&lt;/ref&gt; [[C (programming language)|C]],&lt;ref&gt;{{cite web|url=http://www.qdecoder.org/qlibc/ |title=C implementation in qLibc by Seungyoung Kim}}&lt;/ref&gt; [[C Sharp (programming language)|C#]],&lt;ref name="Horvath"/&gt;&lt;ref&gt;{{cite web|last=Landman |first=Davy |url=http://landman-code.blogspot.com/2009/02/c-superfasthash-and-murmurhash2.html |title=Davy Landman in C# |publisher=Landman-code.blogspot.com |accessdate=13 January 2012}}&lt;/ref&gt; [[Perl]],&lt;ref&gt;{{cite web|url=http://search.cpan.org/~tmaesaka/Digest-MurmurHash-0.10/lib/Digest/MurmurHash.pm |title=Toru Maesaka in Perl |publisher=Search.cpan.org |accessdate=13 January 2012}}&lt;/ref&gt; [[Ruby (programming language)|Ruby]],&lt;ref&gt;{{cite web|author=Bruce Williams &lt;http://codefluency.com&gt;, for Ruby Central &lt;http://rubycentral.org&gt; |url=http://rubyforge.org/projects/murmurhash |title=Ruby |publisher=Rubyforge.org |date=3 May 2009 |accessdate=13 January 2012}}&lt;/ref&gt; [[PHP]],&lt;ref&gt;{{cite web|url=http://murmur.vaizard.org/en/ |title=Murmurhash3 PHP extension |publisher=Murmur.vaizard.org |accessdate=13 January 2012}}&lt;/ref&gt; [[Haskell (programming language)|Haskell]],&lt;ref&gt;{{cite web|url=http://hackage.haskell.org/package/murmur-hash |title=Haskell |publisher=Hackage.haskell.org |accessdate=13 January 2012}}&lt;/ref&gt; [[Scala (programming language)|Scala]],&lt;ref&gt;{{cite web|url=https://github.com/scala/scala/blob/master/src/library/scala/util/hashing/MurmurHash3.scala|title=Scala standard library implementation|date=14 December 2012}}&lt;/ref&gt; [[Java (programming language)|Java]],&lt;ref&gt;[http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/hash/Hashing.html MurmurHash3 in Java], part of Guava&lt;/ref&gt;&lt;ref&gt;[http://dmy999.com/article/50/murmurhash-2-java-port Derek Young in Java], public domain&lt;/ref&gt; and [[JavaScript]].&lt;ref&gt;{{cite web|author=raycmorgan (owner) |url=http://gist.github.com/588423 |title=Javascript implementation by Ray Morgan |publisher=Gist.github.com |accessdate=13 January 2012}}&lt;/ref&gt;&lt;ref&gt;{{cite web|author=garycourt |url=http://github.com/garycourt/murmurhash-js |title=MurmurHash.js by Gary Court |publisher=Github.com |accessdate=13 January 2012}}&lt;/ref&gt;

It has been adopted into a number of open-source projects, most notably libstdc++ (ver 4.6), Perl,&lt;ref&gt;{{cite web|url=http://search.cpan.org/~drolsky/perl-5.17.7/pod/perl5176delta.pod#New_hash_function_Murmurhash-32_%28v3%29 |title=perl5176delta |accessdate=31 December 2012}}&lt;/ref&gt; nginx (ver 1.0.1),&lt;ref&gt;{{cite web|url=http://nginx.org/en/CHANGES |title=nginx |accessdate=13 January 2012}}&lt;/ref&gt; [[Rubinius]],&lt;ref&gt;{{cite web|url=https://github.com/rubinius/rubinius/commit/1d69526c484cc9435a7198e41b8995db6c3acf1a |title=Rubinius |accessdate=29 February 2012}}&lt;/ref&gt; libmemcached (the [[C (programming language)|C]] driver for [[Memcached]]),&lt;ref&gt;[http://libmemcached.org/libMemcached.html libmemcached]&lt;/ref&gt; maatkit,&lt;ref&gt;{{cite web|url=http://code.google.com/p/maatkit/source/detail?r=3273 |title=maatkit |publisher=Google |date=24 March 2009 |accessdate=13 January 2012}}&lt;/ref&gt; [[Hadoop]],&lt;ref name="Hadoop"/&gt; Kyoto Cabinet,&lt;ref&gt;{{cite web|url=http://fallabs.com/kyotocabinet/spex.html |title=Kyoto Cabinet specification |publisher=Fallabs.com |date=4 March 2011 |accessdate=13 January 2012}}&lt;/ref&gt; and [[RaptorDB]].&lt;ref&gt;{{cite web|last=Gholam |first=Mehdi |url=http://www.codeproject.com/KB/database/RaptorDB.aspx |title=RaptorDB CodeProject page |publisher=Codeproject.com |date=13 November 2011 |accessdate=13 January 2012}}&lt;/ref&gt;

==Algorithm==

 Murmur3_32(''key'', ''len'', ''seed'')
     // Note: In this version, all integer arithmetic is performed with unsigned 32 bit integers.
     //       In the case of overflow, the result is constrained by the application of modulo &lt;math&gt;2^{32}&lt;/math&gt; arithmetic.
     
     ''c1'' &lt;math&gt;\gets&lt;/math&gt; 0xcc9e2d51
     ''c2'' &lt;math&gt;\gets&lt;/math&gt; 0x1b873593
     ''r1'' &lt;math&gt;\gets&lt;/math&gt; 15
     ''r2'' &lt;math&gt;\gets&lt;/math&gt; 13
     ''m'' &lt;math&gt;\gets&lt;/math&gt; 5
     ''n'' &lt;math&gt;\gets&lt;/math&gt; 0xe6546b64
  
     ''hash'' &lt;math&gt;\gets&lt;/math&gt; seed
 
     for each fourByteChunk of key
         k &lt;math&gt;\gets&lt;/math&gt; fourByteChunk
 
         k &lt;math&gt;\gets&lt;/math&gt; k * c1
         k &lt;math&gt;\gets&lt;/math&gt; (k &lt;&lt; r1) '''OR''' (k &gt;&gt; (32-r1))
         k &lt;math&gt;\gets&lt;/math&gt; k * c2
 
         hash &lt;math&gt;\gets&lt;/math&gt; hash '''XOR''' k
         hash &lt;math&gt;\gets&lt;/math&gt; (hash &lt;&lt; r2) '''OR''' (hash &gt;&gt; (32-r2))
         hash &lt;math&gt;\gets&lt;/math&gt; hash * m + n
 
     with any remainingBytesInKey
         remainingBytes &lt;math&gt;\gets&lt;/math&gt; SwapEndianOrderOf(remainingBytesInKey)
         // Note: Endian swapping is only necessary on big-endian machines.
         //       The purpose is to place the meaningful digits towards the low end of the value,
         //       so that these digits have the greatest potential to affect the low range digits
         //       in the subsequent multiplication.  Consider that locating the meaningful digits
         //       in the high range would produce a greater effect upon the high digits of the
         //       multiplication, and notably, that such high digits are likely to be discarded
         //       by the modulo arithmetic under overflow.  We don't want that.
         
         remainingBytes &lt;math&gt;\gets&lt;/math&gt; remainingBytes * c1
         remainingBytes &lt;math&gt;\gets&lt;/math&gt; (remainingBytes &lt;&lt; r1) '''OR''' (remainingBytes &gt;&gt; (32 - r1))
         remainingBytes &lt;math&gt;\gets&lt;/math&gt; remainingBytes * c2
 
         hash &lt;math&gt;\gets&lt;/math&gt; hash '''XOR''' remainingBytes
  
     hash &lt;math&gt;\gets&lt;/math&gt; hash '''XOR''' len
 
     hash &lt;math&gt;\gets&lt;/math&gt; hash '''XOR''' (hash &gt;&gt; 16)
     hash &lt;math&gt;\gets&lt;/math&gt; hash * 0x85ebca6b
     hash &lt;math&gt;\gets&lt;/math&gt; hash '''XOR''' (hash &gt;&gt; 13)
     hash &lt;math&gt;\gets&lt;/math&gt; hash * 0xc2b2ae35
     hash &lt;math&gt;\gets&lt;/math&gt; hash '''XOR''' (hash &gt;&gt; 16)

==References==
{{reflist|colwidth=30em}}

==See also==
*[[Fowler–Noll–Vo hash function]]
*[[Jenkins hash function]]
*[[CityHash]]

{{DEFAULTSORT:Murmurhash}}
[[Category:Hash functions]]</text>
      <sha1>ota19sw1wvkvlx5xdla4s84c48s4k8o</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>