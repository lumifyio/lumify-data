<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>Java Persistence API</title>
    <ns>0</ns>
    <id>7811267</id>
    <revision>
      <id>562140015</id>
      <parentid>561492575</parentid>
      <timestamp>2013-06-29T18:02:49Z</timestamp>
      <contributor>
        <ip>87.113.223.64</ip>
      </contributor>
      <text xml:space="preserve">{{refimprove|date=June 2010}}
The '''Java Persistence API''', sometimes referred to as '''JPA''', is a [[Java (programming language)|Java programming language]] [[software framework|framework]] managing [[Relational data model|relational data]] in applications using [[Java Platform, Standard Edition]] and [[Java Platform, Enterprise Edition]].

The [[Java]] Persistence API originated as part of the work of the JSR 220 Expert Group. JPA 2.0 is the work of the [[Java Community Process|JSR]] 317 Expert Group.

[[Persistence (computer science)|Persistence]] in this context covers three areas:
* the [[Application programming interface|API]] itself, defined in the &lt;code&gt;javax.persistence&lt;/code&gt; package
* the [[Java Persistence Query Language]] (JPQL)
* object/relational metadata

== History ==
The final release date of the JPA 1.0 specification was 11 May 2006 as part of [[Java Community Process|JSR]] 220. The JPA 2.0 specification was released 10 Dec, 2009. The JPA 2.1 specification was released 22 April, 2013.

== Entities ==
A persistence [[entity class|entity]] is a lightweight [[Java class]] whose state is typically persisted to a [[Table (database)|table]] in a [[relational database]]. Instances of such an entity correspond to individual [[Row (database)|rows]] in the table. Entities typically have relationships with other entities, and these relationships are expressed through object/relational metadata. Object/relational metadata can be specified directly in the entity class file by using [[Java annotation|annotations]], or in a separate [[XML]] descriptor file distributed with the application.

== The Java Persistence Query Language ==
{{Further2|Detailed information is available at [[b:Java Persistence/Querying|Wikibook's Java Persistence/Querying article]]}}
The [[Java Persistence Query Language]] (JPQL) makes queries against entities stored in a relational database. Queries resemble [[SQL]] queries in syntax, but operate against entity objects rather than directly with database tables.

== Motivation for creating the Java Persistence API ==
Prior to the introduction of [[EJB]] 3.0 specification, many enterprise Java developers used lightweight persistent objects, provided by either persistence frameworks (for example [[Hibernate (Java)|Hibernate]]) or [[data access object|data access objects]] instead of [[Entity Bean|entity beans]]. This due to the fact that entity beans, in previous EJB specifications, called for too much complicated code and heavy resource footprint, and they could be used only in [[Application_server#Java_application_servers|Java EE application servers]] because of interconnections and dependencies in the source code between beans and DAO objects or persistence framework. Thus, many of the features originally presented in third-party persistence frameworks were incorporated into the Java Persistence API, and, as of 2006, projects like [[Hibernate (Java)|Hibernate]] (version 3.2) and [[TopLink|TopLink Essentials]] have become themselves implementations of the Java Persistence API specification.

== Related Technologies==

=== Enterprise JavaBeans ===
The [[Enterprise JavaBean#EJB 3.0, final release (2006-05-02)|EJB 3.0]] specification (itself part of the Java EE 5 platform) included a definition of the Java Persistence API. However, end-users do not need an EJB container or a Java EE application server in order to run applications that use this persistence API.&lt;ref&gt;[http://docs.jboss.org/hibernate/entitymanager/3.5/reference/en/html_single/#architecture-javase Hibernate EntityManager: Java SE environments]&lt;br/&gt;[http://docs.jboss.org/hibernate/entitymanager/3.5/reference/en/html_single/#d0e980 Hibernate EntityManager: Obtaining an EntityManager in a Java SE environment]&lt;/ref&gt; Future versions of the Java Persistence API will be defined in a separate [[Java Community Process|JSR]] and specification rather than in the EJB JSR/specification.

The Java Persistence API replaces the persistence solution of EJB 2.0 CMP (Container Managed Persistence).

=== Java Data Objects API ===
{{main|Java Data Objects}}
The Java Persistence API was developed in part to unify the ''Java Data Objects API'', and the ''EJB 2.0 Container Managed Persistence (CMP) API''. {{As of|2009}} most products supporting each of those APIs support the Java Persistence API.

The Java Persistence API specifies persistence only for [[relational database management system]]s. That is, JPA focuses on [[object-relational mapping]] (ORM) (note that there are JPA providers who support other [[database model]]s besides relational database, but this is outside the scope of what JPA was designed for). Refer to JPA 2 spec section 1 introduction for clarification of the role of JPA, which states very clearly ''"The technical objective of this work is to provide an object/relational mapping facility for the Java application developer using a Java domain model to manage a relational database."''

The [[Java Data Objects]] specification supports ORM, as well as persistence to other types of database models, for example [[flat file database]]s and [[NoSQL databases]], including [[document database]]s, [[graph database]]s, as well as literally any other conceivable datastore.

=== Service Data Object API ===
{{main|Service Data Objects}}
The designers&lt;ref&gt;{{cite web|title=JSR 220 Members|url=http://jcp.org/en/jsr/detail?id=220}}&lt;/ref&gt; of the Java Persistence API aimed to provide for relational persistence, with many of the key areas taken from [[object-relational mapping]] tools such as [[Hibernate (Java)|Hibernate]] and [[TopLink]]. Java Persistence API improved on and replaced EJB 2.0, evidenced by its inclusion in EJB 3.0. The Service Data Objects (SDO) API (JSR 235) has a very different objective to the Java Persistence API and is considered &lt;ref&gt;{{cite web|last=Barreto|first=Charlton|title=SDO and JPA|url=http://charltonb.typepad.com/weblog/2007/10/sdo-and-jpa.html|work=Digital Walkabout|accessdate=5 May 2011}}&lt;/ref&gt;&lt;ref&gt;{{cite web|last=Edwards|first=Mike|title=SDO and Java Persistence Architecture (JPA)|url=http://www.osoa.org/display/Main/SDO+and+Java+Persistence+Architecture+%28JPA%29|work=Open SOA|publisher=osoa.org|accessdate=5 May 2011}}&lt;/ref&gt;  complementary. The SDO API is designed for [[service-oriented architecture]]s, multiple data formats rather than only relational data, and multiple programming languages. The [[Java Community Process]] manages the Java version of the SDO API; the [[C++]] version of the SDO API is managed via [[OASIS (organization)|OASIS]].

=== Hibernate ===
{{main|Hibernate (Java)}}
Hibernate provides an [[open source]] [[object-relational mapping]] framework for [[Java (programming language)|Java]]. Versions 3.2 and later provide an implementation for the Java Persistence API.&lt;ref&gt;{{cite web| title=hibernate.org - Java Persistence with Hibernate| url=http://www.hibernate.org/397.html| publisher=JBoss | accessdate=2008-11-17 | quote=Hibernate implements the Java Persistence object/relational javaAPI and persistence management interfaces }}
&lt;/ref&gt; 

[[Gavin King (Developer)|Gavin King]] founded&lt;ref&gt;{{cite web| title=Manning: Java Persistence with Hibernate | url= | publisher=Manning | accessdate=2008-11-17 | quote=Gavin King -- the founder of the Hibernate project}}&lt;/ref&gt; Hibernate. He represented [[JBoss (company)|JBoss]] on JSR 220,&lt;ref&gt;{{cite web| title=JBoss.com - Industry Leadership | url=http://www.jboss.com/company/leadership | publisher=JBoss | accessdate=2008-11-17 | quote=JSR 220, EJB 3.0 Spec Committee, Gavin King, Bill Burke, Marc Fleury}}&lt;/ref&gt; the [[Java Community Process|JCP]] expert group charged with developing JPA. This led to ongoing controversy and speculation surrounding the relationship between JPA and Hibernate. [[Sun Microsystems]] has stated&lt;ref&gt;{{cite web| title=Java Persistence API FAQ | url =http://java.sun.com/javaee/overview/faq/persistence.jsp  | publisher=Sun Microsystems | accessdate=2010-07-01 | quote=The Java Persistence API draws upon the best ideas from persistence technologies such as Hibernate, TopLink, and JDO |archiveurl = http://web.archive.org/web/20080822023926/http://java.sun.com/javaee/overview/faq/persistence.jsp |archivedate = 2008-08-22}}&lt;/ref&gt;
that ideas came from several frameworks, including Hibernate and [[Java Data Objects|JDO]].

==JPA 2.0==

Development of a new version of JPA, namely JPA 2.0 [[Java Specification Request|JSR]] 317 was started in July 2007.  JPA 2.0 was approved as final on December 10, 2009.

The focus of JPA 2.0 was to address features that were present in some of the popular ORM vendors but couldn't gain consensus approval for JPA 1.0.

The main features included in this update are:
*Expanded object-relational mapping functionality
**support for collections of embedded objects, linked in the ORM with a [[Cardinality (data modeling)|many-to-one relationship]]
**multiple levels of embedded objects
**ordered lists
**combinations of access types
*A criteria query API
*standardization of {{clarify span|query 'hints'|date=September 2012}}
*standardization of additional metadata to support DDL generation
*support for validation

Vendors supporting JPA 2.0
*[[BatooJPA]]
*[[DataNucleus]] (formerly JPOX)
*[[EclipseLink]] (formerly [[TopLink|Oracle TopLink]])
*[[JBoss]] with [[Hibernate (Java)|Hibernate]]
*[[ObjectDB]]
*[[OpenJPA]]
*[[IBM]], via its OpenJPA-based [http://www-01.ibm.com/common/ssi/cgi-bin/ssialias?subtype=ca&amp;infotype=an&amp;appname=iSource&amp;supplier=897&amp;letternum=ENUS210-129 Feature Pack for OSGi Applications and JPA 2.0] for WebSphere Application Server
*[http://community.versant.com/jpa.aspx Versant JPA] (not relational, object database)

==JPA 2.1==

Development of a new version of JPA, namely JPA 2.1 [[Java Specification Request|JSR]] 338 was started in July 2011.  JPA 2.1 was approved as final on April 22, 2013.

The main features included in this update are:
* Converters - allowing custom code conversions between database and object types.
* Criteria Update/Delete - allows bulk updates and deletes through the Criteria API.
* Stored Procedures - allows queries to be defined for database stored procedures.
* Schema Generation
* Entity Graphs - allow partial or specified fetching or merging of objects.
* JPQL/Criteria enhancements - arithmetic sub-queries, generic database functions, join ON clause, TREAT option.

Vendors supporting JPA 2.1
*[[DataNucleus]]
*[[EclipseLink]]

==See also==
*[[JDBC]]
*[[XQuery API for Java|XQJ]]
*[[JPQL]]
*[[iBATIS]]
*[[pureQuery]]
*[[OpenXava]]
*[[SAP NetWeaver Application Server]]
*[https://sourceforge.net/projects/jmastersjops/ JOPS]
*[[.NET Persistence API|.NET Persistence API (NPA)]]

==References==
&lt;!-- ----------------------------------------------------------
  See http://en.wikipedia.org/wiki/Wikipedia:Footnotes for a 
  discussion of different citation methods and how to generate 
  footnotes using the &lt;ref&gt;, &lt;/ref&gt; and &lt;reference /&gt; tags
----------------------------------------------------------- --&gt;
{{reflist}}

== External links ==
{{wikibooks|Java Persistence}}

===General info===
* [http://jcp.org/aboutJava/communityprocess/final/jsr317/index.html JCP Persistence page]
* [http://glassfish.dev.java.net/javaee5/persistence/ GlassFish's Persistence page]
* [http://jcp.org/aboutJava/communityprocess/final/jsr220/index.html Documentation for the final version of the EJB3 spec (called JSR220)]
* [http://www.lab.inf.uc3m.es/~a0080802/RAI/jpa.html JPA Java Persistence API]

===Tutorials===
* [http://java.sun.com/javaee/5/docs/tutorial/doc/?wp406141&amp;JavaEETutorialPartFour.html#wp996871 Persistence in the Java EE 5 tutorial]
* [http://docs.oracle.com/javaee/6/tutorial/doc/bnbpy.html Java EE 6 Persistence API tutorial]
* [http://docs.oracle.com/javaee/7/tutorial/doc/partpersist.htm Java EE 7 Persistence API tutorial]
* [http://docs.oracle.com/javaee/6/api/javax/persistence/package-summary.html Java EE 6 Persistence API Javadoc]
* [http://docs.oracle.com/javaee/7/api/javax/persistence/package-summary.html Java EE 7 Persistence API Javadoc]
* [http://docs.jboss.org/hibernate/entitymanager/3.5/reference/en/html_single/ Hibernate EntityManager User guide]
* [http://docs.jboss.org/hibernate/stable/entitymanager/api/org/hibernate/ejb/package-summary.html Hibernate Javadoc: org.hibernate.ejb]
* [http://eclipsejpa.org EclipseLink JPA tutorials for Application Servers]
* [http://www.datanucleus.org/products/accessplatform_3_2/jpa/guides/tutorial_rdbms.html DataNucleus JPA tutorial for RDBMS]
* [http://community.versant.com/JPADownload.aspx Versant JPA Getting Started Tutorial]

{{Java Persistence API}}

{{DEFAULTSORT:Java Persistence Api}}
[[Category:Java specification requests]]
[[Category:Java enterprise platform]]
[[Category:Object-relational mapping]]
[[Category:Persistence]]
()</text>
      <sha1>7wgwe4o5efxg9em1651gye5z9ehzedy</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>