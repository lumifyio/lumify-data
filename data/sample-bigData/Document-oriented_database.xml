<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>Document-oriented database</title>
    <ns>0</ns>
    <id>15002414</id>
    <revision>
      <id>558311198</id>
      <parentid>556502952</parentid>
      <timestamp>2013-06-04T16:37:28Z</timestamp>
      <contributor>
        <username>Rachkovsky</username>
        <id>3709560</id>
      </contributor>
      <minor></minor>
      <comment>Added link to RavenDB wiki article (to be created).</comment>
      <text xml:space="preserve">{{primary sources|date=May 2012}}
A '''document-oriented database''' is a [[computer program]] designed for storing, retrieving, and managing document-oriented information, also known as [[Semi-structured model|semi-structured data]].   Document-oriented databases are one of the main categories of so-called [[NoSQL]] databases and the popularity of the term "document-oriented database" (or "document store") has grown{{citation needed|date=February 2013}} with the use of the term [[NoSQL]] itself.  In contrast to well-known [[relational databases]] and their notions of "Relations" (or "Tables"), these systems are designed around an abstract notion of a "Document".

== Documents ==
The central concept of a document-oriented database is the notion of a ''Document''. While each document-oriented database implementation differs on the details of this definition, in general, they all assume documents encapsulate and encode data (or information) in some standard formats or encodings. Encodings in use include [[XML]], [[YAML]], [[JSON]], and [[BSON]], as well as binary forms like PDF and Microsoft Office documents (MS Word, Excel, and so on).  

Documents inside a document-oriented database are similar, in some ways, to records or rows in relational databases, but they are less rigid. They are not required to adhere to a standard schema, nor will they have all the same sections, slots, parts, or keys. For example, the following is a document:

{{code|  {
     FirstName:"Bob", 
     Address:"5 Oak St.", 
     Hobby:"sailing"
  }|lang=javascript}}

A second document might be:

{{code|  {
      FirstName:"Jonathan", 
      Address:"15 Wanamassa Point Road", 
      Children:[
         {Name:"Michael",Age:10}, 
         {Name:"Jennifer", Age:8}, 
         {Name:"Samantha", Age:5}, 
         {Name:"Elena", Age:2}
    ]
   }|lang=javascript}}

These two documents share some structural elements with one another, but each also has unique elements. Unlike a relational database where every record contains the same fields, leaving unused fields empty; there are no empty 'fields' in either document (record) in the above example. This approach allows new information to be added to some records without requiring that every other record in the database shares the same structure.

=== Keys ===
Documents are addressed in the database via a unique ''key'' that represents that document.  This key is often a simple string, a URI, or a path.  The key can be used to retrieve the document from the database.  Typically, the database retains an index on the key to speed up document retrieval.

=== Retrieval ===
Another defining characteristic of a document-oriented database is that, beyond the simple key-document (or key-value) lookup that can be used to retrieve a document, the database offers an API or query language that allows the user to retrieve documents based on their content.  For example, you may want a query that retrieves all the documents with a certain field set to a certain value.  The set of query APIs or query language features available, as well as the expected performance of the queries, varies significantly from one implementation to the next.

=== Organization ===
Implementations offer a variety of ways of organizing documents, including notions of 

* Collections
* Tags
* Non-visible Metadata
* Directory hierarchies
* Buckets

== Implementations ==
&lt;onlyinclude&gt;
{| class="wikitable sortable"
|-
! Name
! Publisher
! License
! Language
! Notes
! [[Representational State Transfer|RESTful]] API
|-
| [[BaseX]]
| [http://basex.org/ BaseX Team]
| [[BSD License]]
| [[Java (programming language)|Java]], [[XQuery]]
| Support for XML, JSON and binary formats; client-/server based architecture; concurrent structural and full-text searches and updates; REST APIs.
| Yes
|-
| [http://www.arangodb.org/ ArangoDB]
| [http://www.triagens.com/ triAGENS]
| [[Apache 2 License]]
| [[C_(programming_language)|C]], [[C++]] &amp; [[Javascript]]
| A multi model, high-performance document store and graph database.
| Yes &lt;ref&gt;[http://www.arangodb.org/manuals/current/ImplementorManual.html ArangoDB REST API]&lt;/ref&gt;
|-
| [[Apache Cassandra|Cassandra]]
| [[Apache Software Foundation]]
| [[Apache License]]
| [[Java (programming language)|Java]]
| JSON over HTTP
| Yes
|-
| [[Cloudant]]
| [https://cloudant.com/ Cloudant, Inc.]
| [[proprietary software|Proprietary]]
| [[Erlang_(programming language)|Erlang]], [[Java (programming language)|Java]], [[Scala (programming language)|Scala]], and [[C_(programming_language)|C]]
| Distributed database service based on [[BigCouch]], the company's [[open source]] fork of the [[Apache_Software_Foundation|Apache]]-backed [[CouchDB]] project.
| Yes
|-
| [[Clusterpoint]]
| [http://www.clusterpoint.com Clusterpoint Ltd.]
| Free community license / [[Commercial_software|Commercial]]&lt;ref&gt;[http://www.clusterpoint.com/licensing/ Clusterpoint DBMS Licensing Options]&lt;/ref&gt;
| [[C++]]
| Schema-free, document-oriented [[database management system]] platform with server based data storage, [[full text search]] engine functionality, information [[ranking]] for search relevance and [[Cluster_computing|clustering]].
| Yes
|-
| [[Couchbase Server]]
| [[Couchbase, Inc.]]
| [[Apache License]]
| [[Erlang_(programming language)|Erlang]] and [[C_(programming_language)|C]]
|Distributed NoSQL Document Database.
| Yes &lt;ref&gt;[http://www.couchbase.com/docs/]&lt;/ref&gt;
|-
| [[CouchDB]]
| [[Apache Software Foundation]]
| [[Apache License]]
| [[Erlang_(programming_language)|Erlang]]
| JSON over REST/HTTP with [[Multi-Version Concurrency Control]] and limited [[ACID]] properties. Uses [[map (higher-order function)|map]] and [[fold (higher-order function)|reduce]] for views and queries.&lt;ref&gt;[http://couchdb.apache.org/docs/overview.html CouchDB Overview]&lt;/ref&gt;
| Yes &lt;ref&gt;[http://wiki.apache.org/couchdb/HTTP_Document_API CouchDB Document API]&lt;/ref&gt;
|-
| [[eXist]]
| [[eXist]], [http://exist-db.org]
| [[GPL]]
| [[XQuery]], [[Java (programming language)|Java]]
| XML over REST/HTTP, WebDAV, Lucene Fulltext search, validation, versioning, clustering, triggers, URL rewriting, collections, ACLS, XQuery Update
| Yes &lt;ref&gt;[http://exist-db.org]&lt;/ref&gt;
|-
| [[FleetDB]]
| [http://fleetdb.org/ FleetDB]
| [[MIT License]]
| [[Clojure]]
| A [http://fleetdb.org/docs/protocol.html JSON-based] schema-free database optimized for agile development.
| (unknown)
|-
| [[Apache Jackrabbit|Jackrabbit]]
| [[Apache Software Foundation]]
| [[Apache License]]
| [[Java (programming language)|Java]]
|
| (unknown)
|-
| [[Lotus Notes]]
| IBM
| [[proprietary software|Proprietary]]
| [[LotusScript]], [[Java (programming language)|Java]], Lotus @Formula
| 
| (unknown)
|-
| [[MarkLogic]]
| MarkLogic Corporation
| [http://developer.marklogic.com/licensing Free Express license] or [http://developer.marklogic.com/licensing Commercial]
| [[REST]], [[Java]], [[XQuery]], [[XSLT]], [[C++]] 
| Distributed document-oriented database with  [[Multi-Version Concurrency Control]], integrated [[Full text search]] and [[ACID]]-compliant transaction semantics
| Yes 
|-
| [[MongoDB]]
| 10gen, Inc
| [[Affero General Public License|GNU AGPL v3.0]]&lt;ref&gt;[http://www.mongodb.org/display/DOCS/Licensing MongoDB License]&lt;/ref&gt;
| [[C++]]
| Document-oriented database optimized for highly transient data
| Optional &lt;ref&gt;[http://www.mongodb.org/display/DOCS/Http+Interface#HttpInterface-RESTInterfaces MongoDB REST Interfaces]&lt;/ref&gt;
|-
| [[MUMPS]] Database&lt;ref&gt;[http://gradvs1.mgateway.com/download/extreme1.pdf Extreme Database programming with MUMPS Globals]&lt;/ref&gt;
| 
| [[proprietary software|Proprietary]] and [[Affero General Public License|Affero GPL]]&lt;ref&gt;[http://sourceforge.net/projects/fis-gtm/ GTM MUMPS FOSS on SourceForge]&lt;/ref&gt;
| [[MUMPS]]
| Commonly used in health applications.
| (unknown)
|-
| [[OrientDB]]
| [http://www.orientechnologies.com/ Orient Technologies]
| [[Apache License]]
| [[Java (programming language)|Java]]
| JSON over HTTP
| Yes
|-
| [[RavenDB]]
| [http://hibernatingrhinos.com Hibernating Rhinos LTD]
| [[proprietary software|Proprietary]] and modified [[Affero General Public License|Affero GPL]]&lt;ref&gt;[http://ravendb.net/licensing Ravendb Licensing]&lt;/ref&gt;
| [[C Sharp (programming language)|C#]], [[JavaScript]]
| 
| Yes
|-
| [[Redis]]
|
| [[BSD License]]
| [[ANSI C]]
| Key-value store supporting lists and sets with binary-safe protocol
| (unknown)
|-
| [[Rocket U2]]
| Rocket Software
| [[proprietary software|Proprietary]]
|
| UniData, UniVerse
| Yes (Beta)
|}

&lt;/onlyinclude&gt;

=== XML database implementations ===
{{See|XML database}}
Most XML databases are document-oriented databases.

== See also ==
* [[Internet Message Access Protocol]] (IMAP)
* [[Database theory]]
* [[In-memory database]]
* [[NoSQL]]
* [[Object database]]
* [[Online database]]
* [[Real time database]]
* [[Relational database]]
* [[Data hierarchy]]

== References ==
{{Reflist}}

== Further reading ==
* Assaf Arkin. (2007, September 20). [http://blog.labnotes.org/2007/09/20/read-consistency-dumb-databases-smart-services/ Read Consistency: Dumb Databases, Smart Services.] Labnotes:Donâ€™t let the bubble go to your head!
{{refend}}

== External links ==
* http://solprovider.com/articles/20020612&amp;cat=Lotus/IBM

{{Database models}}
{{Databases}}

{{DEFAULTSORT:Document-Oriented Database}}
[[Category:Document-oriented databases| ]]
[[Category:Data management]]
[[Category:Database management systems]]
[[Category:Types of databases]]</text>
      <sha1>rk6k3p59zig2xgj4zxhdpbakgmwpfaf</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>