<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>Graph database</title>
    <ns>0</ns>
    <id>24799509</id>
    <revision>
      <id>562870629</id>
      <parentid>562870098</parentid>
      <timestamp>2013-07-04T19:07:16Z</timestamp>
      <contributor>
        <username>MoSarwat</username>
        <id>19290602</id>
      </contributor>
      <minor></minor>
      <comment>A bit of details in graph database features</comment>
      <text xml:space="preserve">A '''graph database''' is a [[database]] that uses [[Graph (data structure)|graph structures]] with nodes, edges, and properties to represent and store data. By definition, a graph database is any [[storage system]] that provides index-free adjacency. This means that every element contains a direct [[pointer (computer programming)|pointer]] to its adjacent element and no index [[lookup]]s are necessary. General graph databases that can store any graph are distinct from specialized graph databases such as [[triplestore]]s and [[network database model|network databases]].

== Structure ==

Graph databases are based on [[graph theory]]. Graph databases employ nodes, properties, and edges. Nodes are very similar in nature to the objects that [[object-oriented]] programmers will be familiar with. 

[[File:GraphDatabase_PropertyGraph.png]]

Nodes represent entities such as people, businesses, accounts, or any other item you might want to keep track of. 
 
Properties are pertinent information that relate to nodes. For instance, if "Wikipedia" were one of the nodes, one might have it tied to properties such as "website", "reference material", or "word that starts with the letter 'w'", depending on which aspects of "Wikipedia" are pertinent to the particular database. 
 
Edges are the lines that connect nodes to nodes or nodes to properties and they represent the relationship between the two. Most of the important information is really stored in the edges. Meaningful patterns emerge when one examines the connections and interconnections of nodes, properties, and edges.

== Properties ==
Compared with [[relational databases]], graph databases are often faster for associative data sets, and map more directly to the structure of object-oriented applications. They can scale more naturally to large data sets as they do not typically require expensive [[Join (SQL)|join]] operations. As they depend less on a rigid schema, they are more suitable to manage ad-hoc and changing data with evolving schemas. Conversely, relational databases are typically faster at performing the same operation on large numbers of data elements.

Graph databases are a powerful tool for graph-like queries, for example computing the shortest path between two nodes in the graph. Other graph-like queries can be performed over a graph database in a natural way (for example graph's diameter computations or community detection).

== Graph database projects ==
The following is a list of several well-known graph database projects:&lt;ref&gt;http://graph-database.org&lt;/ref&gt;
{| class="wikitable sortable"
|-
! Name  !! Version !! License !! Language !! Description
|-
| [[AllegroGraph]] || 4.9 (2012?) || [[Proprietary software|Proprietary]] || || A [[Resource Description Framework|RDF]] and graph database.
|-
| [http://www.arangodb.org ArangoDB] || 1.3.2 (June 2013) || [[Apache_2_License|Apache 2]] || [[C_(programming_language)|C]], [[C++]] &amp; [[Javascript]] || A multi-model [[Document-oriented_database|document store]] and graph database.
|-
| [http://www.bigdata.com/blog Bigdata] || || [[GPL]] || [[Java_(programming_language)|Java]] || A RDF/graph database capable of clustered deployment.
|-
|-
| [http://bitbucket.org/lambdazen/bitsy Bitsy] || 1.0 beta || [[AGPL]], Enterprise license (annual/perpetual) || [[Java_(programming_language)|Java]] || A small, embeddable, durable in-memory graph database
|-
| [http://www.brightstardb.com BrightstarDB] || || [[MIT License]] &lt;ref&gt;http://brightstardb.com/blog/2013/02/brightstardb-goes-open-source/&lt;/ref&gt; || [[C_Sharp_(programming_language)|C#]] || An embeddable NoSQL database for the .NET platform with code-first data model generation.
|-
| [[DEX (Graph database) | DEX]]&lt;ref&gt;http://sparsity-technologies.com/dex&lt;/ref&gt;  || 4.7 (2012) || Dual-licensed: personal evaluation use / commercial use || C++ || A graph database from [http://sparsity-technologies.com Sparsity Technologies], a technology transition company from [http://www.dama.upc.edu/technology-transfer/dex DAMA-UPC].
|-
| [http://filament.sourceforge.net/ Filament] || || [[BSD_licenses|BSD]] || [[Java_(programming_language)|Java]] || A graph persistence framework and associated toolkits based on a navigational query style.
|-
| [http://graphbase.net/ GraphBase] || 1.0.03a || [[Proprietary software|Proprietary]] || [[Java_(programming_language)|Java]] || A customizable, distributed, small-footprint graph store with a rich tool set from [http://factnexus.com/ FactNexus].
|-
| Graphd || || [[Proprietary software|Proprietary]] || || The proprietary back-end of [[Freebase]].
|-
| [http://research.microsoft.com/en-us/projects/ldg Horton] || || Proprietary|| C#|| A graph database from [http://research.microsoft.com/en-us/labs/xcg Microsoft Research Extreme Computing Group (XCG)] based on the cloud programming infrastructure [http://research.microsoft.com/en-us/projects/orleans/default.aspx Orleans].
|-
| [http://www.hypergraphdb.org HyperGraphDB] || 1.2 (2012) || [[LGPL]] || [[Java_(programming_language)|Java]] || A graph database supporting generalized [[hypergraph]]s where edges can point to other edges.
|-
| [http://infinitegraph.com InfiniteGraph] || 3.0 (January 2013) || [[GPLv3]] || [[Java_(programming_language)|Java]] || A distributed and cloud-enabled commercial product with flexible licensing.
|-
| [http://infogrid.org/ InfoGrid] || 2.9.5 (2011) || [[AGPLv3]], free for small entities&lt;ref&gt;http://infogrid.org/wiki/Docs/License&lt;/ref&gt; || [[Java_(programming_language)|Java]] || A graph database with web front end and configurable storage engines (MySQL, PostgreSQL, Files, Hadoop).
|-
| [http://www.jcoredb.org jCoreDB Graph] || || || || An extensible database engine with a graph database subproject.
|-
| [[Neo4j]] || 1.8.2 (Feb 2013) ||  [[GPLv3]] community edition, [[AGPLv3]] advanced and enterprise edition&lt;ref&gt;http://neotechnology.com/product&lt;/ref&gt; || [[Java_(programming_language)|Java]] || 
|-
| [[OpenLink_Software|OpenLink]] [[Virtuoso_Universal_Server|Virtuoso]] || || || || A RDF graph database server, deployable as a local embedded instance (as used in the [[NEPOMUK_(framework)|Nepomuk]] Semantic Desktop), a single-instance network server, or a shared-nothing network cluster instance.
|-
| [http://www.oracle.com/technetwork/database-options/spatialandgraph/overview/index.html Oracle Spatial and Graph] || 11.2 (2012) || [[Oracle Corporation|Oracle]] || [[Java_(programming_language)|Java, PL/SQL]] || 1) RDF Semantic Graph: comprehensive W3C RDF graph management in Oracle Database with native reasoning and triple-level label security. 2) Network Data Model property graph: for physical/logical networks with persistent storage and a Java API for in-memory graph analytics.
|-
| [http://www.oracle.com/technetwork/products/nosqldb/overview/index.html Oracle NoSQL Database] || 2.0.39 (2013) || [[Oracle Corporation|Oracle]] || [[Java_(programming_language)|Java]] || RDF Graph for Oracle NoSQL Database is a feature of Enterprise Edition providing W3C RDF graph capabilities in NoSQL Database.
|-
| [[OrientDB]] || 1.3 (2012) || [[Apache_2_License|Apache 2]] || [[Java_(programming_language)|Java]] || A document-graph database.
|-
| [http://openquery.com/graph OQGRAPH] || || [[GPLv2]] || || A graph computation engine for [[MySQL]], [[MariaDB]] and [[Drizzle_(database_server) | Drizzle]].
|-
| [[Ontotext|Ontotext]] [http://www.ontotext.com/owlim OWLIM] || 5.3|| OWLIM Lite is free 

OWLIM SE and Enterprise are commercially licenced|| Java|| A graph database engine, based entirely on Semantic Web standards from W3C: RDF, RDFS, OWL, SPARQL. OWLIM Lite is an "in memory" engine. OWLIM SE is robust standalone database engine. OWLIM Enterprise is a clustered version which offers horizontal scalability and failover support and other enterprise features.
|-
| [http://dl.acm.org/citation.cfm?id=1988736/ R2DF] || || || || R2DF framework for ranked path queries over weighted RDF graphs.
|-
| [http://rois.eggbird.eu/ ROIS] || || [[Freeware]] || [[Modula-2]] || A programmable knowledge server that supports [[Inheritance_(computer_science) | inheritance]] and [[Transitive_relation | transitivity]]. Used in [[OpenGALEN]] as a [[Terminology_Server | Terminology Server]].
|-
| [[Sones_GraphDB | sones GraphDB]] || || [[AGPLv3]]&lt;ref&gt;http://sones.com/&lt;/ref&gt; || [[C_Sharp_(programming_language)|C#]] || A graph database and universal access layer (funded by [[Deutsche Telekom]]).
|-
| [http://titan.thinkaurelius.com/ Titan]  || 0.3 (2013) || [[Apache_2_License|Apache 2]] || [[Java_(programming_language)|Java]] || A distributed, real-time, transactional graph database developed by [http://thinkaurelius.com Aurelius].
|-
| [http://www.dekorte.com/projects/opensource/vertexdb/ VertexDB] || || [[BSD_licenses|Revised BSD]] || [[C_(programming_language)|C]] || A graph database server that supports automatic garbage collection.
|}

== Graph database features ==
The following table compares the features of the above graph databases.
{| class="wikitable sortable"
|-
! Name  !! Graph Model !! API !! Query Methods || Visualizer || Consistency || Backend || Scalability
|-
| [[AllegroGraph]] || [[RDF]] || || || || || ||
|-
| [http://www.arangodb.org ArangoDB] || [https://github.com/tinkerpop/blueprints/wiki/Property-Graph-Model Property Graph] || JavaScript, Blueprints, REST || Graph Traversals via JavaScript, Gremlin || ||MVCC/ACID ||native C/C++ ||
|-
| [http://www.bigdata.com/blog Bigdata] || || || || || || ||
|-
| [http://bitbucket.org/lambdazen/bitsy Bitsy] || Property Graph || Blueprints || Gremlin || || ACID with optimistic concurrency control || Human-readable JSON-encoded text files with checksums and markers for recovery || 
|-
| [[DEX (Graph database) | DEX]]&lt;ref&gt;http://sparsity-technologies.com/dex&lt;/ref&gt;  || Labeled and directed attributed multigraph || [[Java (programming language)|Java]], [[C++]], [[.NET Framework |.NET]] || Native Java, C# and C++ APIs, Blueprints, Gremlin || Exporting functionality to visualization formats || Consistency, durability and partial isolation and atomicity || Native graph. light and independent data structures with a small memory footprint for storage || Master/Slave replication
|-
| [http://filament.sourceforge.net/ Filament] || || || || || || ||
|-
| [http://graphbase.net/Enterprise.html/ GraphBase Enterprise(1)] [http://graphbase.net/Agility.html/ GraphBase Agility(2)] || (1) mixed, (2) Framework-managed Simple Graph  || Java || Bounds Language, embedded java || GraphPad, BoundsPad, Navigator || ACID, graph-based transactions || proprietary native || (1) shared nothing distributed, (2) simple replication, 100+ Billion arcs per server  
|-
| Graphd || || || || || || ||
|-
| [http://research.microsoft.com/en-us/projects/ldg Horton] || Attributed multigraph|| || Horton Query Language (Regular Language Expression + SQL)|| || ||C#, .Net Framework, Asynchronous communication protocols 
|-
| [http://www.hypergraphdb.org HyperGraphDB] || Object-oriented multi-relational labeled hypergraph || Custom,Java || || || MVCC/STM || ||
|-
| [http://infinitegraph.com InfiniteGraph] || Labeled and directed multi-property graph || Java, Blueprints || Java (with parallel, distributed queries), Gremlin || Graph browser for developers. Plugins to allow use of external libraries. || ACID. There is also a parallel, loosely synchronized batch loader. || Objectivity/DB on standard filesystems || Distributed &amp; Sharded. [[Objectivity/DB]] was the first DBMS to store a Petabyte of objects.
|-
| [http://infogrid.org/ InfoGrid] || Dynamically typed, object-oriented graph, multigraphs, semantic models || || || || || ||
|-
| [http://www.jcoredb.org jCoreDB Graph] || || || || || || ||
|-
| [[Neo4j]] || Property Graph || Java, REST, JPython, JRuby, JavaScript (Node.js), PHP, .NET, Django, Clojure || Cypher query language, Native Java APIs, Traverser API, REST, Blueprints, Gremlin || Data Browser included || ACID || Native graph storage with native graph processing engine || MySQL style master/slave replication
|-
| [[OpenLink_Software|OpenLink]] || || || || || || ||
|-
| [http://www.oracle.com/technetwork/database-options/spatialandgraph/overview/index.html  Oracle Spatial and Graph] || RDF graph: Triple &amp; Quad (named graphs); Network Data Model property graph || Java; Apache Jena; PL/SQL || SPARQL 1.1; SPARQL web service end point; SQL|| SPARQL-compliant tools; Apache Jena-based tools; XML &amp; JSON-based tools; SQL based tools|| ACID|| Efficient, compressed, partitioned graph storage;  Native persisted in-database inferencing; SPARQL 1.1 &amp; SQL integration; Triple-level label security; Semantic indexing of documents || Parallel load, query, inference; Query controls; Scales from PC to Oracle Exadata; Supports Oracle Real Application Clusters and Oracle Database 8 exabytes
|-
| [http://www.oracle.com/technetwork/products/nosqldb/overview/index.html Oracle NoSQL Database] || RDF graph: Triple default graph, Triple &amp; Quad named graphs || Java (Apache Jena)|| SPARQL 1.1; SPARQL web service end point|| SPARQL-compliant tools; Apache Jena-based tools; XML &amp; JSON-based tools|| ACID; Configurable consistency &amp; durability policies|| Key/value store; W3C SPARQL 1.1 &amp; Update; In-memory RDFS/OWL inferencing || Parallel load/query; Query controls for: parallel execution, timeout, query optimization hints
|-
| [[OrientDB]] || Property Graph || Java Traverser API, Blueprints, Rexster || Own SQL-like Query Language, Gremlin || || ACID, MVCC || Custom on disc or in memory ||
|-
| [http://openquery.com/graph OQGRAPH] || || || || || || ||
|-
| [http://dl.acm.org/citation.cfm?id=1988736/ R2DF] || || || || || || ||
|-
| [http://rois.eggbird.eu/ ROIS] || || || || || || ||
|-
| [[Sones_GraphDB | sones GraphDB]] || || || || || || ||
|-
| [http://thinkaurelius.github.com/titan/ Titan] || Property Graph || Java, Blueprints, REST, RexPro binary protocol (any language) ||  Gremlin, SPARQL || Integrates with 3rd party tools || ACID or Eventually Consistent || Cassandra, HBase, Berkeley DB || Distributed cluster (120 billion+ edges) or single server.
|-
| [http://www.dekorte.com/projects/opensource/vertexdb/ VertexDB] || || || || || || ||
|}

== Distributed Graph Processing ==
* [http://wiki.apache.org/hama/GraphPackage Angrapa] - graph package in [http://incubator.apache.org/hama/ Hama], a bulk synchronous parallel ([[Bulk_Synchronous_Parallel|BSP]]) platform
* [http://incubator.apache.org/hama/ Apache Hama] - a pure BSP(Bulk Synchronous Parallel) computing framework on top of HDFS (Hadoop Distributed File System) for massive scientific computations such as matrix, graph and network algorithms.
* [http://www.bigdata.com/blog Bigdata] - a RDF/graph database capable of clustered deployment.
* [http://thinkaurelius.github.com/faunus/ Faunus] - a Hadoop-based graph computing framework that uses Gremlin as its query language. Faunus provides connectivity to Titan, Rexster-fronted graph databases, and to text/binary graph formats stored in HDFS. Faunus is developed by [http://thinkaurelius.com Aurelius].
* [[FlockDB]] - an open source distributed, fault-tolerant graph database based on [[MySQL]] and the [[Gizzard_(Scala_framework)|Gizzard]] framework for managing Twitter-like graph data (single-hop relationships) [https://github.com/twitter/flockdb FlockDB on GitHub].
* [http://incubator.apache.org/giraph/ Giraph] - a Graph processing infrastructure that runs on Hadoop (see Pregel).
* [http://graphbase.net/Enterprise.html GraphBase] - Enterprise Edition supports embedding of callable Java Agents within the vertices of a distributed graph.
* [http://www.goldenorbos.org GoldenOrb] - Pregel implementation built on top of Apache Hadoop
* [http://www.cs.vu.nl/~ekr/hipg/ HipG] - a library for high-level parallel processing of large-scale graphs. HipG is implemented in Java and is designed for distributed-memory machine
* [http://infinitegraph.com InfiniteGraph] - a commercially available distributed graph database that supports parallel load and parallel queries.
* [http://kowshik.github.com/JPregel/ JPregel] - In-memory java based Pregel implementation
* [http://kdt.sourceforge.net KDT] - An open-source distributed graph library with a Python front-end and C++/MPI backend ([http://gauss.cs.ucsb.edu/~aydin/CombBLAS/html/index.html Combinatorial BLAS]).
* [[OpenLink_Software|OpenLink]] [[Virtuoso_Universal_Server|Virtuoso]] - the shared-nothing Cluster Edition supports distributed graph data processing.
* [http://www.oracle.com/technetwork/database-options/spatialandgraph/overview/index.html  Oracle Spatial and Graph] - loading, inferencing, and querying workloads are automatically and transparently distributed across the nodes in an Oracle Real Application Cluster, Oracle Exadata Database Machine, and Oracle Database Appliance.
* [http://github.com/xslogic/phoebus Phoebus] - Pregel implementation written in Erlang
* [http://portal.acm.org/citation.cfm?id=1582723 Pregel] - Google's internal graph processing platform, released details in ACM paper.
* [http://grafia.cs.ucsb.edu/sedge/ Sedge] - A framework for distributed large graph processing and graph partition management (including an open source version of Google's Pregel)
* [http://code.google.com/p/signal-collect/ Signal/Collect] - a framework for parallel graph processing written in Scala
* [http://thinkaurelius.github.com/titan/ Titan] - A distributed, disk-based graph database developed by [http://thinkaurelius.com Aurelius].
* [http://research.microsoft.com/en-us/projects/trinity/ Trinity] - Distributed in-memory graph engine under development at Microsoft Research Labs.
* [http://www.boost.org/doc/libs/1_51_0/libs/graph_parallel/doc/html/index.html Parallel Boost Graph Library (PBGL)] - a [[C++]] library for graph processing on distributed machines, part of [[Boost (C++ libraries)|Boost]] framework.

== APIs and Graph Query/Programming Languages ==
* [http://graphbase.net/JavaAPIHelp.html#BoundsLanguage Bounds Language] - terse C-style syntax which initiates concurrent traversals in GraphBase and supports interaction between them.
* [http://blueprints.tinkerpop.com Blueprints] - a Java API for Property Graphs from [http://www.tinkerpop.com/ TinkerPop] and supported by a few graph database vendors.
* [https://github.com/Vanaheimr/Blueprints.NET Blueprints.NET] - a C#/.NET API for generic Property Graphs.
* [http://bulbflow.com Bulbflow] - a Python persistence framework for Rexster, Titan, and Neo4j Server.
* [http://docs.neo4j.org/chunked/snapshot/cypher-query-lang.html Cypher] - a Property Graph Query Language developed by [[Neo4j]].
* [http://gremlin.tinkerpop.com/ Gremlin] - an open-source graph programming language that works over various graph database systems.
* [https://github.com/jadell/neo4jphp/wiki Neo4jPHP] - a PHP library wrapping the Neo4j graph database.
* [http://github.com/pangloss/pacer Pacer] - a Ruby dialect/implementation of the Gremlin graph traversal language.
* [http://pipes.tinkerpop.com Pipes] - a lazy dataflow framework written in Java that forms the foundation for various property graph traversal languages.
* [http://pypi.python.org/pypi/pyblueprints/0.1 PYBlueprints] - a Python API for Property Graphs.
* [http://code.google.com/p/pygr/ Pygr] - a Python API for large-scale analysis of biological sequences and genomes, with alignments represented as graphs.
* [http://rexster.tinkerpop.com Rexster] - a graph database server that provides a REST or binary protocol API (RexPro). Supports Titan, Neo4j, OrientDB, Dex, and any TinkerPop/Blueprints-enabled graph.
* [[SPARQL]] - a query language for databases, able to retrieve and manipulate data stored in [[Resource Description Framework]] format.
* [http://www.w3.org/wiki/SPASQL SPASQL] - an extension of the SQL standard, allowing execution of SPARQL queries within SQL statements, typically by treating them as subquery or function clauses. This also allows SPARQL queries to be issued through "traditional" data access APIs ([[Open_Database_Connectivity|ODBC]], [[Java Database Connectivity|JDBC]], [[OLE DB]], [[ADO.NET]], etc.)
* [http://www.oracle.com/technetwork/database-options/spatialandgraph/overview/index.html  Oracle SQL and PL/SQL APIs] - have graph extensions for Oracle Spatial and Graph.
* [https://github.com/ahzf/Styx Styx] (previously named Pipes.Net) - a data flow framework for C#/.NET for processing generic graphs and Property Graphs.
* [https://github.com/StartTheShift/thunderdome Thunderdome] - a Titan Rexster Object-Graph Mapper for Python

== See also ==
* [[NoSQL (concept)]]
* [[Document-oriented database]]
* [[Structured storage]]
* [[Object database]]
* [[Resource Description Framework]] (RDF) - framework to express node-edge graphs
* [[Graph transformation]] for a complementary topic (rule based in memory manipulation of graphs instead of [[Database transaction|transaction]] safe [[Persistence (computer science)|persistence]]).
* [[RDF Database]]

== References ==
{{Reflist}}

== External links ==
* [http://www.slideshare.net/ahzf/nosql-frankfurt-2010-the-graphdb-landscape-and-sones NoSQL Frankfurt 2010 - The GraphDB Landscape and sones]
* [http://highscalability.com/paper-graph-databases-and-future-large-scale-knowledge-management Graph Databases and the Future of Large-Scale Knowledge Management]
* [http://techportal.ibuildings.com/2009/09/07/graphs-in-the-database-sql-meets-social-networks/ Graphs in the database: SQL meets social networks]
* [http://blog.neo4j.org/2009/09/social-networks-in-database-using-graph.html Social networks in the database: using a graph database]
* [http://netdb09.cis.upenn.edu/netdb09papers/netdb09-final3.pdf Scaling Online Social Networks without Pains]
* [http://googleresearch.blogspot.com/2009/06/large-scale-graph-computing-at-google.html Large-scale Graph Computing at Google]
* Eric Lai. (2009, July 1). [http://www.computerworld.com/s/article/9135086/No_to_SQL_Anti_database_movement_gains_steam_ No to SQL? Anti-database movement gains steam]
* Renzo Angles, Claudio Gutierrez. [http://portal.acm.org/citation.cfm?id=1322433 Survey of graph database models]. ACM Computing Surveys, Feb. 2008.
* [http://infogrid.org/ InfoGrid] - an open-source application platform including a graph database
* Rodriguez, M.A., Neubauer, P, [http://arxiv.org/abs/1004.1001 The Graph Traversal Pattern] article.
* [http://portal.acm.org/citation.cfm?id=1807283 Optimizing Schema-Last Tuple-Store Queries in Graphd] SIGMOD 2010

{{Database models}}

[[Category:Graph databases| ]]
[[Category:Database models]]</text>
      <sha1>tpdrepw46csn1yqfsb7p5dftdpoz0j1</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>