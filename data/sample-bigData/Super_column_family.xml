<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>Super column family</title>
    <ns>0</ns>
    <id>31320800</id>
    <revision>
      <id>548420018</id>
      <parentid>437309374</parentid>
      <timestamp>2013-04-03T02:14:55Z</timestamp>
      <contributor>
        <ip>24.240.88.44</ip>
      </contributor>
      <comment>/* Code example */ Explain what's what in JSON syntax example</comment>
      <text xml:space="preserve">[[Image:Super column family (data store).png|300px|thumb|A super column family consists of a row key and a number of [[super column]]s.]]
A '''super column family''' is a [[NoSQL (concept)|NoSQL]] object that contains column families. It is a [[tuple]] (pair) that consists of a [[key-value pair]], where the key is mapped to a value that are column families.&lt;ref&gt;{{cite web
| accessdate = 2011-03-28
| author = Ronald Mathies
| date = 2010-03-18
| location = http://www.sodeso.nl/
| publisher = Sodeso - Software Development Solution
| title = Installing and using Apache Cassandra With Java Part 2 (Data model)
| quote = [...] the largest container, the SuperColumnFamily, if you understand the ColumnFamily then this construction isn’t much harder, instead of having Columns in the inner most Map we have SuperColumns. So it just adds an extra dimension. As displayed in the image, the Key of the Map which contain the SuperColumns must be the same as the name of the SuperColumn (just like with the ColumnFamily).
| url = http://www.sodeso.nl/?p=108}}&lt;/ref&gt; In analogy with relational databases, a super column family is something like a "view" on a number of tables. It can also be seen as a map of tables.&lt;ref&gt;{{cite web
| accessdate = 2011-03-28
| author = Arin Sarkissian
| date = 2009-09-01
| location = http://arin.me/
| publisher = Arin Sarkissian
| title = WTF is a SuperColumn? An Intro to the Cassandra Data Model
| quote = 4) a “Super Column Family” is a map of tables (=table of nested tables)
| url = http://arin.me/blog/wtf-is-a-supercolumn-cassandra-data-model}}&lt;/ref&gt;

==Benefits==

It is useful when making a data model to have some kind of a [[View (database)|view]] on a number of [[Table (database)|tables]]. Using a super column family is something similar to that in [[distributed data store]]s. There are, however, no "[[Join (database)|joins]]" between the "tables", as data stores like [[Apache Cassandra]] are non-relational.

==Sorting and querying==

There is no way to sort super columns after they have been inserted, nor to [[Query language|query]] an arbitrary query in [[distributed data store]]s. Super columns are sorted when they are added to the column family, and it is also possible to use a different sorting attribute for the contained [[Column (data store)|columns]] of a super column. Similar to the [[standard column family]], sorting is defined by an attribute. This attribute is called the &lt;code&gt;CompareSubcolumnsWith&lt;/code&gt; in [[Apache Cassandra]] and have the following values:
* &lt;code&gt;AsciiType&lt;/code&gt;
* &lt;code&gt;BytesType&lt;/code&gt;
* &lt;code&gt;LexicalUUIDType&lt;/code&gt;
* &lt;code&gt;LongType&lt;/code&gt;
* &lt;code&gt;TimeUUIDType&lt;/code&gt;
* &lt;code&gt;UTF8Type&lt;/code&gt;

Although it is possible to sort the super columns in a way, the columns inside the super columns another way, it is not allowed to treat part of the super columns in a special way.&lt;ref&gt;{{cite web
| accessdate = 2011-03-30
| location = http://www.sodeso.nl/
| publisher = Sodeso - Software Development Solutions
| title = Installing and using Apache Cassandra With Java Part 3 (Data model 2)
| quote = The rules of sorting not only apply to Columns but also to SuperColumns, in case of the SuperColumns we also need to specify a second sorting rule using the CompareSubcolumnsWith attribute. [...] I used the UTF8Type for both the SuperColumn as for the Column within the SuperColumn, this doesn’t have to be the case, you can mix them using all the various sorting types. However it is not possible to have different sorting types on the same level, so it is not possible to use UTF8Type and the LongType for different SuperColumns in the same SuperColumnFamily, the same rule applies for Columns.
| url = http://www.sodeso.nl/?p=207}}&lt;/ref&gt;

==Super column families vs. views==

Column families have a [[Schemelessness|schemeless]] nature so that each of their "row"s can contain a different number of columns, and even different column names could be in each row.&lt;ref name="QuickTour"&gt;{{cite web 
| accessdate = 2011-03-25
| author = Posted by Terry
| date = 2010-03-22
| publisher = Terry.Cho's blog
| title = Apache Cassandra Quick tour
| quote = One of interest thing is each row can have different scheme. Cassandra row has “emailAddress” ,”age” column. TerryCho row has “emailAddress”,”gender” column. This characteristic is called as “Schemeless” (Data structure of each row in column family can be different).
| url = http://javamaster.wordpress.com/2010/03/22/apache-cassandra-quick-tour/}}&lt;/ref&gt; So, they are a very different concept than the rows in [[relational database management system|relational database management system (RDBMS)]]s. This is one of the reasons why the concept is not trivial for an experienced RDBMS expert.

==Code example==
Here is an example of a super column family that contains other column families:&lt;ref name="QuickTour"/&gt;

&lt;source lang="sql"&gt;
 UserList={ 
   Cath:{
     username:{firstname:”Cath”,lastname:”Yoon”}
     address:{city:”Seoul”,postcode:”1234”}
   }
   Terry:{
     username:{firstname:”Terry”,lastname:”Cho”}
     account:{bank:”hana”,accounted:”1234”}
   }
 }
&lt;/source&gt;

Where "Cath" and "Terry" are row keys; "username", "address", and "account" are super column names; and "firstname", "lastname", "city", etc are column names.

==See also==
* [[Column family|Column family types]]

==References==
{{reflist}}

==External links==
* [http://wiki.apache.org/cassandra/DataModel The Apache Cassandra data model]

{{database-stub}}

&lt;!--Categories--&gt;
[[Category:Distributed data stores]]
[[Category:NoSQL]]

&lt;!--Interwikies--&gt;</text>
      <sha1>hcgstxnq04128cdn0eq7oni8mf6mm3l</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>