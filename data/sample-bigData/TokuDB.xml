<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>TokuDB</title>
    <ns>0</ns>
    <id>32755993</id>
    <revision>
      <id>559843868</id>
      <parentid>558493949</parentid>
      <timestamp>2013-06-14T08:25:27Z</timestamp>
      <contributor>
        <ip>213.193.117.138</ip>
      </contributor>
      <text xml:space="preserve">{{Infobox software
| name                   = TokuDB
| logo                   =
| caption                =
| developer              = [http://tokutek.com/ Tokutek]
| latest release version = 7.0.1
| latest release date    =  April 22, 2013 
| operating system       =
| genre                  = [[Database engine]]
| license                = Modified [[GNU General Public License]] (version 2) &lt;ref&gt;{{cite web
 |url        = https://github.com/Tokutek/ft-index/blob/master/README-TOKUDB
 |title      = TokuDB README
 |accessdate = 2013-04-22
}}&lt;/ref&gt; or proprietary [[EULA]]
| website                = http://www.tokutek.com/
}}
'''TokuDB''' is a storage engine for [[MySQL]] and [[MariaDB]] that is specifically designed for high performance on write-intensive workloads. It achieves this via [[Fractal]] Tree indexing, which is based on [[cache-oblivious algorithm]]. This approach to building memory-efficient systems was originally jointly developed by researchers at the [[Massachusetts Institute of Technology]],&lt;ref&gt;
{{cite web
 |url        = http://en.oreilly.com/mysql2010/public/schedule/detail/13265
 |title      = How TokuDB Fractal Tree Databases Work
 |publisher  = O'Reilly
 |accessdate = 2011-01-17
}}&lt;/ref&gt;
&lt;ref&gt;
{{cite web
 |url        = http://supertech.csail.mit.edu/cacheObliviousBTree.html
 |title      = Cache-Oblivious Search Trees Project
 |publisher  = Massachusetts Institute of Technology
 |accessdate = 2011-01-17
}}&lt;/ref&gt;
Rutgers University,
&lt;ref&gt;
{{cite web
 |url        = http://www.cs.rutgers.edu/~farach/pubs/cache-oblivious-Btree-full.pdf
 |title      = Cache-Oblivious B-trees
 |publisher  = Rutgers University
 |accessdate = 2011-01-17
}}&lt;/ref&gt;
and the [[State University of New York at Stony Brook]] (SUNY).
&lt;ref&gt;
{{cite web
 |url        = http://www.cs.sunysb.edu/~bender/pub/sicomp05-BenderDeFa.ps
 |title      = Cache Oblivious B-trees
 |publisher  = State University of New York (SUNY) at Stony Brook
 |accessdate = 2011-01-17
}}&lt;/ref&gt;
TokuDB is a [[Scalability#Database scalability|scalable]], [[ACID]] and [[Multiversion concurrency control|MVCC]] compliant [[storage engine]] that provides [[Database index|indexing]]-based query improvements, offers online [[Database schema|schema]] modifications, and reduces [[Replication_(computing)#Database_replication|slave]] lag for both [[hard disk drive]]s and [[flash memory]].

A Community Edition of TokuDB was released under a modified [[GNU General Public License]] in April 2013. &lt;ref&gt;
{{cite web
 |url        = http://www.tokutek.com/2013/04/announcing-tokudb-v7-open-source-and-more/
|title      = Announcing TokuDB v7: Open Source and More
 |accessdate = 2013-04-22
}}&lt;/ref&gt;

==B-trees==

Most relational databases use indexes to increase query performance. Databases can leverage indexes to significantly reduce the amount of data they examine while responding to queries. Indexes are commonly implemented with [[B-trees]], a data structure first described in 1970. The [[B-tree]] data structure allows for operations like inserting data and sorted order iteration, the primary operation used by an index. Depending on the workload and implementation, B-tree performance can be limited by the random I/O characteristics of disks. In addition, while freshly loaded databases tend to have good sequential behavior, this behavior becomes increasingly difficult to maintain as a database grows, resulting in more random I/O and performance challenges.
&lt;ref&gt;
{{cite web
 |url        = http://www.cs.sunysb.edu/~bender/pub/cache-oblivious-btree.ps
|title      = Cache Oblivious B-trees
 |publisher  = State University of New York (SUNY) at Stony Brook
 |accessdate = 2011-01-17
}}&lt;/ref&gt;

==Fractal tree indexes==

===Overview===
Fractal Tree indexes implement the same operations as a B-tree, and thus are a drop-in replacement for B-trees.  Fractal Tree indexes effectively replaces small, frequent writes with larger, less frequent ones, which enables better compression, insertion performance. Fractal Trees also allow for messages to be injected into the tree in such a fashion that schema changes such as adding or dropping a [[Column (database)|column]], or adding an index, can be done online, and in the background. 
&lt;ref&gt;
{{cite web
 |url        = http://www.percona.com/ppc2009/PPC2009_Covering_Indexes_Tokutek.pdf
|title      = Covering Indexes: Orders-of-Magnitude Improvements
 |publisher  = Percona
 |accessdate = 2011-01-17
}}&lt;/ref&gt;
As a result, more indexes can be maintained without a drop in performance. This is because adding data to indexes tends to stress the performance of B-trees, but performs well in Fractal Tree indexes
&lt;ref&gt;
{{cite web
 |url        = http://www.mysqlperformanceblog.com/2009/04/28/detailed-review-of-tokutek-storage-engine/
|title      = Detailed review of Tokutek storage engine
 |publisher  = Percona
 |accessdate = 2012-02-22
}}&lt;/ref&gt;

===Uses===

Fractal Tree indexes can be applied to a number of applications characterized by near-real time analysis of streaming data.  They can be used as the storage layer of a database or as the storage layer of a file system.  When used in a database, they can be used in any setting where a B-tree is used, with improved performance.  Examples include: network event management, online advertising networks, web 2.0 and clickstream analytics, and air traffic control management.
&lt;ref&gt;
{{cite web
|url        = http://www.mysqlperformanceblog.com/2009/11/05/air-traffic-queries-in-myisam-and-tokutek-tokudb/
|title      = Air traffic queries in MyISAM and Tokutek (TokuDB)
|publisher  = MySQL Performance Blog
|accessdate = 2011-01-17
}}&lt;/ref&gt;
Other uses include accelerated [[Web crawler|crawler]] performance for [[search engine]]s for [[social media]] sites. It can also be used to create indexes and columns online, enabling query flexibility for ecommerce personalization. It is also suited to improving performance and reducing existing loads on transactional websites. In general it performs well in applications that must simultaneously store [[Computer data logging|log file]] data and execute ad hoc queries.

===Role in Big Data===

TokuDB has played an important role in the [[Big Data]] movement in MySQL.
&lt;ref&gt;
{{cite web
|url        = http://www.forbes.com/sites/siliconangle/2012/02/29/big-data-is-creating-the-future-its-a-50-billion-market/2/
|title      = Big Data is Creating The Future - It's A $50 Billion Market
|publisher  = Forbes
|accessdate = 2012-05-21
}}&lt;/ref&gt;
It was noted as a critical new technology in the [[O'Reilly Media|O'Reilly]] Strata Conference on Big Data.
&lt;ref&gt;
{{cite web
|url        = http://strataconf.com/strata2012/public/cfp/202
|title      = Strata 2012 Startup Showcase
|publisher  = O'Reilly
|accessdate = 2012-05-21
}}&lt;/ref&gt;

==See also==
*[[NewSQL]]
*[[Database engine]]

==References==
{{Reflist}}

==External links==
* [http://www.tokutek.com/resources/tokudb-vs-innodb/ Comparison of MySQL Storage Engines]
* [http://www.bloorresearch.com/blog/IM-Blog/2012/4/yoursql-running-slowly.html Is Bloor Research: YourSQL Running too Slowly?]
* [http://tokutek.com/tokuview/ TokuView - The Official TokuDB Blog]
* [http://www.dbms2.com/2013/01/15/tokutek-update/ DBMS2.com Overview of Tokutek]

[[Category:Database engines]]
[[Category: Free database management systems]]
[[Category:MySQL]]
[[Category:MariaDB]]
[[Category:NewSQL]]</text>
      <sha1>gqvt79e4n2dst6l5plqobds8ts0ilg7</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>