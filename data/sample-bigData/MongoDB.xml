<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>MongoDB</title>
    <ns>0</ns>
    <id>21855450</id>
    <revision>
      <id>563349765</id>
      <parentid>563324367</parentid>
      <timestamp>2013-07-08T09:04:45Z</timestamp>
      <contributor>
        <username>Compfreak7</username>
        <id>15056083</id>
      </contributor>
      <comment>Filling in 2 references using [[WP:REFLINKS|Reflinks]]</comment>
      <text xml:space="preserve">{{multiple issues|
{{cleanup|reason=An abundance of inline external links|date=May 2013}}
{{primary sources|date=January 2013}}
}}

{{Infobox software
| name                   = MongoDB
| logo                   = [[File:MongoDB Logo.png|225px]]
| screenshot             =
| caption                =
| author                 =
| developer              = [[10gen]]
| released               = {{Start date|2009}}
| status                 = Active
| latest release version = 2.4.4
| latest release date    = {{release date|2013|06|04|df=yes}} 
| latest preview version =
| latest preview date    =
| frequently updated     = yes
| programming language   = [[C++]]
| operating system       = [[Cross-platform]]
| language               = English
| genre                  = [[Document-oriented database]]
| license                = GNU AGPL v3.0 (drivers: Apache license)
| website                = {{URL|http://www.mongodb.org/}}
}}
'''MongoDB''' (from "hu'''mongo'''us") is an open source [[document-oriented database]] system developed and supported by [[10gen]]. It is part of the [[NoSQL]] family of database systems. Instead of storing data in tables as is done in a "classical" [[relational database]], MongoDB stores structured data as [[JSON]]-like documents with dynamic schemas (MongoDB calls the format [[BSON]]), making the integration of data in certain types of applications easier and faster.

10gen began development of MongoDB in October 2007. The database is used by [[MTV Networks]],&lt;ref name="mtv"&gt;[http://blog.mongodb.org/post/5360007734/mongodb-powering-mtvs-web-properties MongoDB Powering MTV's Web Properties]&lt;/ref&gt; [[Craigslist]],&lt;ref name="craigslist"&gt;[http://blog.mongodb.org/post/5545198613/mongodb-live-at-craigslist MongoDB live at craigslist]&lt;/ref&gt; [[Foursquare]]&lt;ref name="foursquare"&gt;[http://blip.tv/file/3704098 MongoDB at foursquare - Presentation at MongoNYC]&lt;/ref&gt; and [[Unique Identification Authority of India|UIDAI Aadhaar]].&lt;ref name="aadhaar"&gt;[http://www.linuxforu.com/2011/12/aadhaar-testimony-to-foss-success-in-india/ Aadhaar: A Testimony to Success of FOSS in India! - LINUX For You]&lt;/ref&gt; MongoDB is the most popular [[NoSQL]] database management system.&lt;ref name="db.engines"&gt;[http://db-engines.com/en/ranking DB-Engines Ranking]&lt;/ref&gt;

Binaries are available for Windows, Linux, OS X, and Solaris.

==History==

Development of MongoDB began at [[10gen]] in 2007, when the company was building a [[platform as a service]] similar to [[Windows Azure]] or [[Google App Engine]].&lt;ref&gt;[http://www.theregister.co.uk/2011/05/25/the_once_and_future_mongodb/ MongoDB daddy: My baby beats Google BigTable]&lt;/ref&gt; In 2009, MongoDB was open sourced as a stand-alone product&lt;ref name="license"&gt;[http://blog.mongodb.org/post/103832439/the-agpl The MongoDB NoSQL Database Blog, The AGPL]&lt;/ref&gt; with an [[Affero General Public License|AGPL]] license.

In March 2010, from version 1.4, MongoDB has been considered production ready.&lt;ref&gt;[http://blog.mongodb.org/post/472835820/mongodb-1-4-ready-for-production The MongoDB NoSQL Database Blog, MongoDB 1.4 Ready for Production]&lt;/ref&gt;

The latest stable version, 2.4.0, was released in March 2013.

== Licensing and support ==

MongoDB is available for free under the [[GNU Affero General Public License]].&lt;ref name="license"/&gt; The language drivers are available under an [[Apache License]]. In addition, [[10gen]] offers commercial licenses for MongoDB.&lt;ref&gt;[http://www.10gen.com/subscription MongoDB Support by 10gen]&lt;/ref&gt;

== Main features ==

The following is a brief summary of some of the main features: 

;Ad hoc queries
:MongoDB supports search by field, range queries, regular expression searches.  Queries can return specific fields of documents and also include user-defined [[JavaScript]] functions.
;Indexing
:Any field in a MongoDB document can be [[database index|indexed]] (indices in MongoDB are conceptually similar to those in RDBMSes). Secondary indices are also available.
;Replication
:MongoDB supports '''master-slave replication'''. A master can perform reads and writes.  A slave copies data from the master and can only be used for reads or backup (not writes). The slaves have the ability to select a new master if the current one goes down.
;Load balancing
:'''MongoDB scales horizontally using [[sharding]]'''.&lt;ref&gt;[http://www.mongodb.org/display/DOCS/Sharding Article "Sharding" on MongoDB Administrator's Manual]&lt;/ref&gt; The developer chooses a shard key, which determines how the data in a collection will be distributed.  The data is split into ranges (based on the shard key) and distributed across multiple shards. (A shard is a master with one or more slaves.)
:MongoDB can run over multiple servers, balancing the load and/or duplicating data to keep the system up and running in case of hardware failure. Automatic configuration is easy to deploy and new machines can be added to a running database. 
;File storage
:MongoDB could be used as a [[file system]], taking advantage of load balancing and data replication features over multiple machines for storing files.

:This function, called [[GridFS]],&lt;ref&gt;[http://www.mongodb.org/display/DOCS/GridFS GridFS article on MongoDB Developer's Manual]&lt;/ref&gt; is included with MongoDB drivers and available with no difficulty for development languages (see "[[MongoDB#Language support|Language Support]]" for a list of supported languages). MongoDB exposes functions for file manipulation and content to developers. GridFS is used, for example, in plugins for NGINX.&lt;ref&gt;[http://github.com/mdirolf/nginx-gridfs NGINX plugin for MongoDB source code]&lt;/ref&gt; and lighttpd&lt;ref&gt;[http://bitbucket.org/bwmcadams/lighttpd-gridfs/src/ lighttpd plugin for MongoDB source code].&lt;/ref&gt;

:In a multi-machine MongoDB system, files can be distributed and copied multiple times between machines transparently, thus effectively creating a load balanced and fault tolerant system.

;Aggregation
:'''[[MapReduce]] can be used for batch processing of data and aggregation operations'''. The aggregation framework enables users to obtain the kind of results for which the [[SQL]] GROUP BY clause is used.
;Server-side JavaScript execution
:JavaScript can be used in queries, aggregation functions (such as MapReduce), are sent directly to the database to be executed.
;Capped collections
:MongoDB supports fixed-size collections called capped collections. This type of collection maintains insertion order and, once the specified size has been reached, behaves like a circular queue.

For further information on the points listed look up the [http://www.mongodb.org/display/DOCS/Manual MongoDB Developer Manual]

== Use cases and production deployments ==

MongoDB is well suited for the following cases:&lt;ref&gt;[http://www.mongodb.org/display/DOCS/Use+Cases "Use Cases" article at MongoDB's web page]&lt;/ref&gt;
* '''Archiving''' and '''event logging'''
* '''Document and Content Management Systems'''. As a document-oriented (JSON) database, MongoDB's flexible schemas are a good fit for this.
* '''E-commerce'''. Several sites are using MongoDB as the core of their ecommerce infrastructure (often in combination with an RDBMS for the final order processing and accounting).
* '''Gaming'''. High performance small read/writes are a good fit for MongoDB; also for certain games geospatial indexes can be helpful.
* '''High volume problems'''.  Problems where a traditional DBMS might be too expensive for the data in question.  In many cases developers would traditionally write custom code to a filesystem instead using flat files or other methodologies.
* '''Mobile'''. Specifically, the server-side infrastructure of mobile systems. Geospatial indexes are key here.
* '''Operational data store of a web site'''. MongoDB is very good at real-time inserts, updates, and queries. Scalability and replication are provided which are necessary functions for large web sites' real-time data stores. Specific web use case examples:
** content management
** comment storage, management, voting
** user registration, profile, session data
* '''Projects using iterative/agile development methodologies'''.  Mongo's BSON data format makes it very easy to store and retrieve data in a document-style / "schemaless" format. Addition of new properties to existing objects is easy and does not generally require blocking "ALTER TABLE" style operations.
* '''Real-time stats/analytics'''

=== Enterprises that use MongoDB ===

Many enterprises use and have production deployments of MongoDB.  Examples are [[SAP AG]], [[MTV]], and [[Sourceforge]].&lt;ref&gt;[http://www.mongodb.org/display/DOCS/Production+Deployments "Production Deployments" article] on MongoDB web&lt;/ref&gt;

== Data manipulation: collections and documents ==

MongoDB stores structured data as JSON-like documents, using dynamic schemas (called [[BSON]]), rather than predefined schemas.  In MongoDB, an element of data is called a '''document''', and documents are stored in '''collections'''. One collection may have any number of documents. 

The arrangement of data in a MongoDB instance is innovative compared to traditional [[relational database]]s ("RDBMS", "relational database management system").  In an [[RDBMS]], the data can be seen as organized in "tables", each of which consists of "records" (or "rows"), each of which consists of "fields".  One of the essential characteristics of an RDBMS is that, within each table, every record has the same fields (with, usually, differing values) in the same order.  This strict parallelism in organization of the data leads to all the parallel instances of a field taken together being called a "column".

Considering a MongoDB instance, we could say that collections are like tables, and documents are like records. But there is a big difference:  any document in a collection can have completely different fields from the other documents.  The only schema requirement MongoDB places on documents (aside from size limits) is that they must contain an '_id' field with a unique, non-array value.  

A typical table in a relational database, accessible by SQL, could be represented on the page like this:

{| class="wikitable"
|-
! Last Name !! First Name !! Date of Birth
|-
| DUMONT || Jean || 01-22-1963
|-
| PELLERIN || Franck || 09-19-1983
|-
| GANNON || Dustin || 11-12-1982
|}
:''Every record in an SQL-accessible table has the same fields, in the same order.''

On the other hand, a typical MongoDB collection would look like this:

&lt;source lang="javascript"&gt;
{
    "_id": ObjectId("4efa8d2b7d284dad101e4bc9"),
    "Last Name": "DUMONT",
    "First Name": "Jean",
    "Date of Birth": "01-22-1963"
},
{
    "_id": ObjectId("4efa8d2b7d284dad101e4bc7"),
    "Last Name": "PELLERIN",
    "First Name": "Franck",
    "Date of Birth": "09-19-1983",
    "Address": "1 chemin des Loges",
    "City": "VERSAILLES"
}
&lt;/source&gt;
:''Each document in a MongoDB collection can have different fields from the other documents (Note: "_id" field is obligatory, automatically created by MongoDB; it's a unique index which identifies the document.  Its value need not be the default MongoID type shown here—the user may specify any non-array value for _id as long as the value is unique. We can think of the "_id" value as the document’s primary key. Every document requires this value.&lt;ref&gt;{{cite web
  |url=http://www.learn-with-video-tutorials.com/mongodb-free-tutorial-video
  |title=MongoDB tutorial video
  |publisher=Learn-with-video-tutorials
  |accessdate=2013-04-07
}}&lt;/ref&gt;).''

In a document, new fields can be added or existing ones suppressed, modified or renamed at any moment. There is no predefined schema. A document structure is very simple:  it follows the [[JSON]] format, and consists of a series of key-value pairs, so that a document is the equivalent of the feature called [[Comparison of programming languages (mapping)|in various computer languages]] [[Associative array|"associative arrays", "maps", "dictionaries", "hash-tables" or "hashes"]].  The key of the key-value pair is the name of the field, the value in the key-value pair is the field's content. The key and value are separated by ":", as shown.

A value can be a number; a string; true or false; binary data such as an image; an array of values (each of which can be of different type); or an entire subordinate document:

&lt;source lang="javascript"&gt;
{
    "_id": ObjectId("4efa8d2b7d284dad101e4bc7"),
    "Last Name": "PELLERIN",
    "First Name": "Franck",
    "Date of Birth": "09-19-1983",
    "phoneNumber": [
        {
            "type": "home",
            "number": "212 555-1234"
        },
        {
            "type": "fax",
            "number": "646 555-4567",
            "verified":  false
        }
    ],
    "Address": {
        "Street": "1 chemin des Loges",
        "City": "VERSAILLES"
    },
    "Months at Present Address":  37
}
&lt;/source&gt;

''Here we can see that the field "Address" contains a subordinate document, which possesses two fields of its own, "Street" and "City".''

== Language support ==
MongoDB has official drivers for a variety of popular programming languages and development environments.&lt;ref name="mongodb.org"&gt;{{cite web|url=http://www.mongodb.org/display/DOCS/Drivers |title=MongoDB Drivers and Client Libraries — MongoDB Ecosystem 2.2.2 |publisher=Mongodb.org |date= |accessdate=2013-07-08}}&lt;/ref&gt;  Web programming language [[Opa (programming language)|Opa]] also has built-in support for MongoDB, which is tightly integrated in the language and offers a type-safety layer on top of MongoDB.&lt;ref&gt;{{cite web|author=/ |url=https://github.com/MLstate/opalang/wiki/The-database |title=The database · MLstate/opalang Wiki · GitHub |publisher=Github.com |date=2012-11-27 |accessdate=2013-07-08}}&lt;/ref&gt;  There are also a large number of unofficial or community-supported drivers for other programming languages and frameworks.&lt;ref name="mongodb.org"/&gt;

== HTTP/REST interfaces ==
There are REST and HTTP interfaces that allow the manipulation of MongoDB entries via HTTP GET, POST, UPDATE, and DELETE calls.

An [http://www.mongodb.org/display/DOCS/Http+Interface overview of the available HTTP/REST interfaces] can be found on the MongoDB website.

==Management and graphical front-ends==

=== MongoDB  tools ===
In a MongoDB installation the following commands are available:

;mongo
:MongoDB offers an interactive shell called &lt;tt&gt;'''mongo'''&lt;/tt&gt;,&lt;ref&gt;[http://www.mongodb.org/display/DOCS/mongo+-+The+Interactive+Shell mongo - The Interactive Shell]&lt;/ref&gt; which lets developers view, insert, remove, and update data in their databases, as well as get replication information, set up sharding, shut down servers, execute JavaScript, and more.

:Administrative information can also be accessed through a '''web interface''',&lt;ref&gt;[http://www.mongodb.org/display/DOCS/Http+Interface#HttpInterface-HTTPConsole HTTP Console]&lt;/ref&gt; a simple webpage that serves information about the current server status.  By default, this interface is 1000 ports above the database port (28017).

;mongostat
:&lt;tt&gt;mongostat&lt;/tt&gt;&lt;ref&gt;[http://docs.mongodb.org/manual/reference/mongostat/ mongostat Manual]&lt;/ref&gt; is a command-line tool that displays a summary list of status statistics for a currently running MongoDB instance: how many inserts, updates, removes, queries, and commands were performed, as well as what percentage of the time the database was locked and how much memory it is using.  This tool is similar to the UNIX/Linux [[vmstat]] utility.

;mongotop
:&lt;tt&gt;mongotop&lt;/tt&gt;&lt;ref&gt;[http://docs.mongodb.org/manual/reference/mongotop/ mongotop Manual]&lt;/ref&gt; is a command-line tool providing a method to track the amount of time a MongoDB instance spends reading and writing data. mongotop provides statistics on the per-collection level. By default, mongotop returns values every second.  This tool is similar to the UNIX/Linux [[Top (Unix)|top]] utility.

;mongosniff
:&lt;tt&gt;mongosniff&lt;/tt&gt;&lt;ref&gt;[http://docs.mongodb.org/manual/reference/mongosniff/ mongosniff Manual]&lt;/ref&gt; is a command-line tool providing a low-level tracing/sniffing view into database activity by monitoring (or "sniffing") network traffic going to and from MongoDB.  &lt;tt&gt;mongosniff&lt;/tt&gt; requires the [[Libpcap]] network library and is only available for Unix-like systems.  A cross-platform alternative is the open source [[Wireshark]] packet analyzer which has full support for the MongoDB wire protocol.

;mongoimport, mongoexport
:&lt;tt&gt;mongoimport&lt;/tt&gt;&lt;ref&gt;[http://docs.mongodb.org/manual/reference/mongoimport/ mongoimport Manual]&lt;/ref&gt; is a command-line utility to import content from a JSON, CSV, or TSV export created by &lt;tt&gt;mongoexport&lt;/tt&gt;&lt;ref&gt;[http://docs.mongodb.org/manual/reference/mongoexport/ mongoexport Manual]&lt;/ref&gt; or potentially other third-party data exports.  Usage information can be found in the MongoDB Manual's section on [http://docs.mongodb.org/manual/administration/import-export/ Importing and Exporting MongoDB Data].

;mongodump, mongorestore
:&lt;tt&gt;mongodump&lt;/tt&gt;&lt;ref&gt;[http://docs.mongodb.org/manual/reference/mongodump/ mongodump Manual]&lt;/ref&gt; is a command-line utility for creating a binary export of the contents of a Mongo database; &lt;tt&gt;mongorestore&lt;/tt&gt;&lt;ref&gt;[http://docs.mongodb.org/manual/reference/mongorestore/ mongorestore Manual]&lt;/ref&gt; can be used to reload a database dump.  Data backup strategies and considerations are detailed in the MongoDB Manual's section on [http://docs.mongodb.org/manual/administration/backups/ Backup and Restoration Strategies].

=== Monitoring plugins ===

There are MongoDB monitoring plugins available for the following network tools: 
:* [http://github.com/erh/mongo-munin mongo-munin]: Plugin for [[Munin (network monitoring application)|Munin]]
:* [http://github.com/quiiver/mongodb-ganglia mongodb-ganglia]: Plugin for [[Ganglia (software)|ganglia]]
:* [http://tag1consulting.com/blog/mongodb-cacti-graphs MongoDB Cacti Graphs]: Plugin for [[Cacti (software)|cacti]]
:* [http://scoutapp.com/plugin_urls/291-mongodb-slow-queries MongoDB Slow Queries]: Plugin for [http://scoutapp.com/ Scout]

More monitoring and diagnostic tools for MongoDB are listed on [http://www.mongodb.org/display/DOCS/Monitoring+and+Diagnostics MongoDB Admin Zone: Monitoring and Diagnostics]

=== Cloud-based monitoring services ===

:* [http://www.10gen.com/mongodb-monitoring-service MongoDB Monitoring Service (MMS)] is a free, [[cloud-based]] monitoring and alerting solution for MongoDB deployments offered by [http://www.10gen.com/ 10gen], the company who develops MongoDB.
:* [http://www.serverdensity.com/mongodb-monitoring/ Server Density] is a [[cloud-based]] tool which helps you provision and monitor your infrastructure. It includes a [http://www.serverdensity.com/mongodb-monitoring/ custom dashboard for MongoDB], MongoDB specific alerts, replication failover timeline and iPhone, iPad and Android mobile apps.

=== Web and desktop application GUIs ===

Several GUIs have been created by MongoDB's developer community to help visualize their data.  Some popular ones are:

'''Open source tools'''
* [http://rockmongo.com/ RockMongo]: PHP-based MongoDB administration GUI tool
* [http://www.phpmoadmin.com/ phpMoAdmin]: another PHP GUI that runs entirely from a single 95kb self-configuring file
* [https://github.com/agirbal/umongo UMongo]: a desktop application for all platforms.
* [http://mongo3.com/ Mongo3]: a Ruby-based interface.
* [https://github.com/FlaPer87/meclipse/ Meclipse]: [[Eclipse (software)|Eclipse]] plugin for interacting with MongoDB
* [http://mongohub.todayclose.com/ MongoHub]: a [[freeware]] native Mac OS X application for managing MongoDB. Version for other operating systems is built on Titanium Desktop.
* [https://github.com/Imaginea/mViewer mViewer]: A simple web-based Administration and Management Tool for MongoDB written in Java.
* [http://www.spviewer.com/mongodbpumper.html MongoDBPumper]: a commercial high-performance data transfer solution to provide export and import functionality between Oracle and MongoDB databases.

More client tools for MongoDB are listed on [http://www.mongodb.org/display/DOCS/Admin+UIs MongoDB Administrator Manual]

=== Business intelligence tools and solutions ===
* [http://jaspersoft.com/bigdata Jaspersoft BI]: Java based Report Designer and Report Server that supports MongoDB
* [http://www.pentahobigdata.com/ecosystem/partner-testimonials/mongodb Pentaho]: MongoDB connectors for Pentaho Kettle and Pentaho BI
* [http://www.rjmetrics.com/ RJMetrics]: A hosted Business Intelligence Solution that supports MongoDB.
* [http://ecommerce-analytics.com/ eCommerce Analytics]: eCommerce Analytics Software that supports MongoDB data analysis.
* Nucleon BI Studio: MS Windows based business intelligence software that supports MongoDB and other RDBMS.

== Criticism ==

As with many NoSQL technologies MongoDB falls prey to its lack of compliance to the [[ACID|ACID paradigm]], more specifically [[Durability (database systems)|durability]].

Write durability is a hot topic among critics of MongoDB, one which can span entire arguments.&lt;ref&gt;[https://news.ycombinator.com/item?id=5686492 ycombinator - A Year of MongoDB]&lt;/ref&gt; Over the course of versions MongoDB has gone through iterations to improve durability in all of the main areas.

=== Journaling ===

One of the main durability concerns before version 1.8 (stable) of MongoDB was the lack of a journal which was released with version 1.8 (stable).&lt;ref&gt;[http://blog.mongodb.org/post/3903149313/mongodb-1-8-released The MongoDB NoSQL Database Blog, MongoDB 1.8 Released]&lt;/ref&gt;

This meant that single server durability of data before journaling was compromised which could leave MongoDB's data files in an inconsistent state on a single server. Versions after 1.8 allowed for the recovery of MongoDBs data files to a [http://docs.mongodb.org/manual/tutorial/recover-data-following-unexpected-shutdown/ consistent state post unplanned halting of a system]

That being said, MongoDB does not have multi-document transactions as such this cannot guarantee that you could rollback a multi-document update using the journal to a previous consistent state.

However, MongoDB's use of an fsync&lt;ref&gt;[http://docs.mongodb.org/manual/reference/glossary/#term-fsync MongoDB Glossary - fsync]&lt;/ref&gt; queue to update the on disk data files still causes controversy; the main point being that to still ensure a consistent and up to date journal you must acknowledge every write with the [http://docs.mongodb.org/manual/core/write-concern/#journaled journal] otherwise a server could receive a write but lose it before it reaches the journal in the event of an unplanned shutdown.

=== Write Concern ===

The [http://docs.mongodb.org/manual/reference/glossary/#term-write-concern write concern] determines how well drivers can ensure they have sent a durable write to the server.

The default level of [http://docs.mongodb.org/manual/reference/glossary/#term-write-concern write concern] within drivers was fire and forget up until November, 2012.&lt;ref&gt;[http://blog.mongodb.org/post/36666163412/introducing-mongoclient Introducing MongoClient]&lt;/ref&gt; Afterwards all drivers were updated&lt;ref&gt;[http://docs.mongodb.org/manual/release-notes/drivers-write-concern/#driver-write-concern-change Default Write Concern Change]&lt;/ref&gt; to reflect the new default of  [http://docs.mongodb.org/manual/core/write-concern/#acknowledged acknowledged writes].

This does still throw into question the durability of a write since this level of write concern does not decide if the document has been written to disk or not. Instead the new level of write concern waits for a [http://docs.mongodb.org/manual/reference/program/mongod/ mongod] to return with an acknowledgement by polling with [http://docs.mongodb.org/manual/reference/command/getLastError/ getLastError()].

The notion of polling with getLastError() is also noted as a criticism.&lt;ref name="hackingdistributed.com"&gt;[http://hackingdistributed.com/2013/01/29/mongo-ft/ Broken by Design: MongoDB Fault Tolerance]&lt;/ref&gt;

Within a [http://docs.mongodb.org/manual/core/replication/ replica set] the write concern can effect how durable the write is. The new level of write concern would only acknowledge the write on one member (primary), lowering the durability of any write you send to a replica set. Even though the write would eventually be replicated to the other members it would take some time and the application would have no knowledge of this event. The use of a different write concern, otherwise known as [http://docs.mongodb.org/manual/core/write-concern/#replica-acknowledged replica acknowledged] writes can solve this problem.

One of the main criticisms&lt;ref name="hackingdistributed.com"/&gt; is that the write is still not durable with this level of write concern (replica acknowledged) along with the added [http://docs.mongodb.org/manual/core/write-concern/#journaled journal] option set.

Aside from the fact that, by default, MongoDB uses an fsync queue to [[Asynchronous I/O|asynchronously]] update the data files it is noted that the  [http://docs.mongodb.org/manual/core/write-concern/#journaled journaled] option, which exists to ensure a disk write irrespective of the fsync queue, will only ensure a disk write to the journal on the primary of a replica set. The other members will still only acknowledge the write as though it is [http://docs.mongodb.org/manual/core/write-concern/#acknowledged acknowledged]. It is argued that all nodes which receive the command should write to journal before an acknowledgement is returned if the write were to be durable.

=== Further reading ===

Many posts, by individuals, have been written about MongoDB on various areas including its shortcomings over the years. Some of the main ones include:
* [http://blog.serverdensity.com/does-everyone-hate-mongodb/ Does everyone hate MongoDB?] - a summary of and comments on recent criticism
* [http://blog.engineering.kiip.me/post/20988881092/a-year-with-mongodb A Year with MongoDB]
* [http://snmaynard.com/2012/10/17/things-i-wish-i-knew-about-mongodb-a-year-ago/ Things I Wish I Knew About MongoDB a Year Ago]
* [https://speakerdeck.com/mitsuhiko/a-year-of-mongodb A Year of MongoDB]
* [http://maurits.vanrees.org/weblog/archive/2013/05/armin-ronacher-a-year-with-mongodb Armin Ronacher - A Year with MongoDB]
* [http://hackingdistributed.com/2013/01/29/mongo-ft/ Broken by Design: MongoDB Fault Tolerance]

==See also==
{{Portal|Free software}}
* Apache's Erlang-based [[CouchDB]] (open source)
* Apache's Java-based [[HBase]] (open source)
* Basho [[Riak]] (open source, Apache License 2.0)
* [[NoSQL]], i.e., [[Structured storage]]

==References==
{{Reflist|2}}

==Bibliography==
{{Refbegin}}
*{{citation
| first1    = Kyle
| last1     = Banker
| date      = March 28, 2011
| title     = MongoDB in Action
| edition   = 1st
| publisher = [[Manning]]
| page     = 375
| isbn      = 978-1-935182-87-0
}}
*{{citation
| first1    = Kristina
| last1     = Chodorow
| first2    = Michael
| last2     = Dirolf
| date      = September 23, 2010
| title     = MongoDB: The Definitive Guide
| edition   = 1st
| publisher = [[O'Reilly Media]]
| page     = 216
| isbn      = 978-1-4493-8156-1
}}
*{{citation
| first1    = Mitch
| last1     = Pirtle
| date      = March 3, 2011
| title     = MongoDB for Web Development
| edition   = 1st
| publisher = [[Addison-Wesley Professional]]
| page     = 360
| isbn      = 978-0-321-70533-4
}}
*{{citation
| first1    = Tim
| last1     = Hawkins
| first2    = Eelco
| last2     = Plugge
| first3    = Peter
| last3     = Membrey
| date      = September 26, 2010
| title     = The Definitive Guide to MongoDB: The NoSQL Database for Cloud and Desktop Computing
| edition   = 1st
| publisher = [[Apress]]
| page     = 350
| isbn      = 978-1-4302-3051-9
}}
{{Refend}}

==External links==
* [http://www.mongodb.org/ Official website]
* [http://www.facebook.com/MongoDB/ MongoDB on Facebook]
* [https://en.twitter.com/MongoDB MongoDB on Twitter] 
* [http://zanphp.com/wiki/Clase_MongoDB MongoDB with ZanPHP Spanish Documentation]
* [http://www.linkedin.com/groups?gid=3265391 mongoDB User Group] on [[LinkedIn]]
* [http://nosql.mypopescu.com/tagged/mongodb MongoDB news and articles on myNoSQL]
* Eric Lai. (2009, July 1). [http://www.computerworld.com/s/article/9135086/No_to_SQL_Anti_database_movement_gains_steam_ No to SQL? Anti-database movement gains steam]
* [http://mrbool.com/course/Introduction-to-MongoDB/323 Videos about MongoDB on MrBool.com]
* [http://www.nosqldatabases.com/main/tag/mongodb MongoDB articles on NoSQLDatabases.com]
* [http://nosql.eventbrite.com/ June 2009 San Francisco NOSQL Meetup Page]
* [http://www.technologyreview.com/video/?vid=356 Designing for the Cloud] at MIT Technology Review
* [http://www.slideshare.net/mdirolf/mongodb-europython-2009 EuroPython Conference Presentation]
* {{youtube|dOP3w-9Q6lU|Non-relational data persistence in Java using MongoDB - Software Engineer at MongoDB}}
* [http://thechangelog.com/post/287597162/episode-0-0-7-mike-dirolf-from-10gen-and-mongodb Interview with Mike Dirolf on The Changelog about MongoDB background and design decisions]
* [http://mongomvc.codeplex.com/ MongoMvc - A MongoDB Demo App with ASP.NET MVC]
* [http://www.markus-gattol.name/ws/mongodb.html#faqs FAQs about MongoDB]
* [http://blog.iprofs.nl/2011/11/25/is-mongodb-a-good-alternative-to-rdbms-databases-like-oracle-and-mysql Is MongoDB a good alternative to RDBMs databases?]
* [http://www.mongodb.org/display/DOCS/SQL+to+Mongo+Mapping+Chart SQL to Mongo Mapping Chart]
* [http://openmymind.net/2011/3/28/The-Little-MongoDB-Book/ The Little MongoDB Book]
* [http://perfectmarket.com/blog/not_only_nosql_review_solution_evaluation_guide_chart NoSQL Solution: Evaluation and Comparison: MongoDB vs Redis, Tokyo Cabinet, and Berkeley DB]
* [http://www.learn-with-video-tutorials.com/mongodb-free-tutorial-video MongoDB tutorial video]
* [http://jelastic.com/ MongoDB Hosting]

{{DEFAULTSORT:Mongodb}}
[[Category:Free database management systems]]
[[Category:Document-oriented databases]]
[[Category:Distributed computing architecture]]
[[Category:Structured storage]]
[[Category:NoSQL]]</text>
      <sha1>rz6sp9vv1tw11fajhn57pn8b643r3dg</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>