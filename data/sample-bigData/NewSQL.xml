<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>NewSQL</title>
    <ns>0</ns>
    <id>37256799</id>
    <revision>
      <id>562458200</id>
      <parentid>562457944</parentid>
      <timestamp>2013-07-01T22:16:04Z</timestamp>
      <contributor>
        <username>Stuartyeates</username>
        <id>154991</id>
      </contributor>
      <comment>tweak</comment>
      <text xml:space="preserve">'''NewSQL''' is a class of modern [[relational database management system|relational]] [[database management system]]s that seek to provide the same scalable performance of [[NoSQL]] systems for [[online transaction processing]] (read-write) workloads while still maintaining the [[ACID]] guarantees of a traditional database system.&lt;ref name="aslett2010"&gt;
{{cite web 
| url = http://www.cs.brown.edu/courses/cs227/papers/newsql/aslett-newsql.pdf
| title = How Will The Database Incumbents Respond To NoSQL And NewSQL?
| first = Matthew
| last = Aslett
| publisher = 451 Group
| publication-date = 2011-04-04
| year = 2011
| accessdate = 2012-07-06
}}
&lt;/ref&gt;&lt;ref&gt;
{{cite web 
| url = http://cacm.acm.org/blogs/blog-cacm/109710-new-sql-an-alternative-to-nosql-and-old-sql-for-new-oltp-apps/fulltext
| title = NewSQL: An Alternative to NoSQL and Old SQL for New OLTP Apps
| first = Michael
| last = Stonebraker
| publisher = Communications of the ACM
| publication-date = 2011-06-16
| accessdate  = 2012-07-06
}}
&lt;/ref&gt;&lt;ref name="highscalability"&gt;
{{cite web 
| url = http://highscalability.com/blog/2012/9/24/google-spanners-most-surprising-revelation-nosql-is-out-and.html
| title = Google Spanner's Most Surprising Revelation: NoSQL is Out and NewSQL is In
| first = Todd
| last = Hoff
| publication-date = 2012-09-24
| accessdate  = 2012-10-07
}}
&lt;/ref&gt;

== History ==
The term was first used by 451 Group analyst Matthew Aslett in a 2011 research paper discussing the rise of new database systems as challengers to established vendors.&lt;ref name="aslett2010" /&gt; Many enterprise systems that handle high-profile data (e.g., financial and order processing systems) also need to be able to scale but are unable to use NoSQL solutions because they cannot give up strong transactional and consistency requirements.
&lt;ref name="aslett2010"&gt;{{cite web 
| url = http://blogs.the451group.com/information_management/2011/04/06/what-we-talk-about-when-we-talk-about-newsql/
| title = What we talk about when we talk about NewSQL
| first = Matthew
| last = Aslett
| publisher = 451 Group
| publication-date = 2011-04-06
| year = 2010
| accessdate = 2012-10-07
}}&lt;/ref&gt;&lt;ref&gt;
{{cite web 
| url = http://berlinbuzzwords.de/sessions/keynote-0
| title = Building Spanner
| first = Alex
| last = Lloyd
| publisher = Berlin Buzzwords
| publication-date = 2012-06-05
| year = 2012
| accessdate = 2012-10-07
}}&lt;/ref&gt; The only options previously available for these organizations were to either purchase a more powerful single-node machine or develop custom middleware that distributes queries over traditional DBMS nodes. Both approaches are prohibitively expensive and thus are not an option for many. Thus, in this paper, Aslett discusses how NewSQL upstarts are poised to challenge the supremacy of commercial vendors, in particular [[Oracle Database|Oracle]].

== Systems ==
Although NewSQL systems vary greatly in their internal architectures, the two distinguishing features common amongst them is that they all support the [[Relational model|relational data model]] and use [[SQL]] as their primary interface.&lt;ref&gt;{{cite journal
| first = Rick
| last = Cattell
| publisher = [[Association for Computing Machinery]]
| title = Scalable SQL and NoSQL data stores
| journal = [[SIGMOD]] Record
| volume = 39
| number = 4
| year = 2011
| month = May
| url = http://cattell.net/datastores/Datastores.pdf
| accessdate = 2012-10-06
}}&lt;/ref&gt;
One of the first known NewSQL systems is the [[H-Store]] [[Parallel database|parallel database system]].&lt;ref&gt;
{{cite web 
| url = http://blogs.the451group.com/information_management/2008/03/04/is-h-store-the-future-of-database-management-systems/
| title = Is H-Store the future of database management systems?
| first = Matthew
| last = Aslett
| year = 2008
| publication-date = 2008-03-04
| accessdate  = 2012-07-05
}}
&lt;/ref&gt;&lt;ref&gt;
{{cite web 
| url = http://www.zdnet.com/blog/btl/h-store-complete-destruction-of-the-old-dbms-order/8055
| title = H-Store: Complete destruction of the old DBMS order?
| first = Larry
| last = Dignan
| year = 2008
| accessdate  = 2012-07-05
}}
&lt;/ref&gt;

NewSQL systems can be loosely grouped into three categories:
&lt;ref&gt;
{{cite web 
| url = http://www.linuxforu.com/2012/01/newsql-handle-big-data/
| title = NewSQL - The New Way to Handle Big Data
| first =  Prasanna
| last = Venkatesh
| year = 2012
| publication-date = 2012-01-30
| accessdate  = 2012-10-07
}}
&lt;/ref&gt;
&lt;ref&gt;
{{cite web 
| url = http://www.scalebase.com/the-story-of-newsql/
| title = The NewSQL Market Breakdown
| first = Doron
| last = Levari
| year = 2011
| accessdate  = 2012-04-08
}}
&lt;/ref&gt;

=== New architectures ===
The first type of NewSQL systems are completely new database platforms. Though many of the new databases have taken different design approaches, there are two primary categories evolving.

==== Distribute query to fragments to data nodes ====
These are designed to operate in a distributed cluster of [[Shared nothing architecture|shared-nothing]] nodes. Here nodes typically own a subset of the data. SQL Queries are split into query fragments and sent to the nodes that own the data. These databases are able to scale linearly as additional nodes are added.

* General purpose databases - These maintain full functionality of the traditional databases, handling all queries types. These are complete rewrite with the assumption of a distributed system and includes components like distributed concurrency control, flow control and distributed query processor. This includes [[Google Spanner]], [[Clustrix]], [[NuoDB]] and [[TransLattice]].

* [[In-memory database]]s - The applications targeted by these NewSQL systems are characterized as having a large number of transactions that (1) are short-lived (i.e., no user stalls), (2) touch a small subset of data using index look-ups (i.e., no full table scans or large distributed joins), and (3) are repetitive (i.e., executing the same queries with different inputs) &lt;ref&gt;
{{cite conference
| authorlink = Michael Stonebraker
| first = Mike | last = Stonebraker
| coauthors = ''et al.''
| title = The end of an architectural era: (it's time for a complete rewrite
| booktitle = VLDB '07: Proceedings of the 33rd international conference on Very large data bases
| location = Vienna, Austria
| year = 2007
| url = http://hstore.cs.brown.edu/papers/hstore-endofera.pdf
| format = PDF }}&lt;/ref&gt; These NewSQL systems achieve high performance and scalability by eschewing much of the legacy architecture of the original [[IBM System R|System R]] design, such as heavy weight [[Algorithms for Recovery and Isolation Exploiting Semantics|recovery]] or [[concurrency control]] algorithms.&lt;ref&gt;
{{cite web 
| authorlink = Michael Stonebraker
| url = http://cacm.acm.org/magazines/2011/6/108651-10-rules-for-scalable-performance-in-simple-operation-datastores/fulltext
| title =  Ten Rules For Scalable Performance In Simple Operation' Datastores
| first = Michael
| last = Stonebraker
| volume = 54
| pages = 72â€“80
| publisher = Communications of the ACM
| publication-date = 2011-06-16
| accessdate  = 2012-10-07
}}
&lt;/ref&gt; [[VoltDB]] is the primary database in this category.

==== Pull data to node processing query ====

These database system have single primary node source of data (possibly replicated). A set of nodes act as transaction processing nodes. These pull all the data required for a particular query to the node that receives the query. Some optimizations are performed to pull minimum data possible. Two nodes trying to write to the same data have to move data between them. These provide high-availability and some scalability. These do not scale linearly under contentious loads or OLAP queries. 

Other notable systems include  [[VMware]]'s SQLFire.

=== MySQL Engines ===
The second category are highly optimized [[Database engine|storage engines]] for [[SQL]]. These systems provide the same programming interface as MySQL, but scale better than built-in engines, such as [[InnoDB]]. Examples of these new storage engines include [[ScaleDB]], [[TokuDB]], [[MemSQL]], and [[Akiban]].&lt;ref&gt;
{{cite web 
| url = http://gigaom.com/cloud/akiban-goes-wider-with-its-cool-newsql-database/
| title = Akiban goes wider with its cool NewSQL database
| first = Barb
| last = Darrow
| year = 2012
| accessdate  = 2012-10-09
}}
&lt;/ref&gt;

=== Transparent sharding ===
These systems provide a [[Shard (database architecture)|sharding]] [[middleware]] layer to automatically split databases across multiple nodes. Examples of this type of system includes [[dbShards]], [[Scalearc]], and [[ScaleBase]].

==See also==
* [[Transaction processing]]
* [[Partition (database)]]

== References ==
{{Reflist|2}}

{{Databases}}

&lt;!--Categories--&gt;
[[Category:Data management]]
[[Category:Distributed data stores]]
[[Category:NewSQL]]</text>
      <sha1>4d9mgzxy4koe5j7e68l0x7xvv7eabo4</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>