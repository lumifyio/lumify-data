<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>Voldemort (distributed data store)</title>
    <ns>0</ns>
    <id>31403505</id>
    <revision>
      <id>562833653</id>
      <parentid>546138805</parentid>
      <timestamp>2013-07-04T13:38:41Z</timestamp>
      <contributor>
        <ip>131.234.216.25</ip>
      </contributor>
      <comment>updated to latest version</comment>
      <text xml:space="preserve">{{Infobox software
| name                   = Project Voldemort
| logo                   = 
| screenshot             =
| caption                =
| author                 = 
| developer              = [[LinkedIn]]
| released               = 2009
| status                 = Active
| latest release version = 1.3.0
| latest release date    = {{release date|2013|03|19}}
| frequently updated     = yes
| programming language   = [[Java (programming language)|Java]]
| operating system       = [[Cross-platform]]
| language               = English
| genre                  = [[key-value store]]
| license                = [[Apache License]] 2
| website                = {{URL|http://project-voldemort.com/}}
}}

'''Voldemort''' is a [[distributed data store]] that is designed as a [[key-value store]] used by [[LinkedIn]] for high-scalability storage.&lt;ref name="Voldemort"&gt;{{cite web
| accessdate = 2011-04-05
| location = http://project-voldemort.com/
| publisher = Project Voldemort - A distributed database
| title = Voldemort is a distributed key-value storage system
| url = http://project-voldemort.com/}}&lt;/ref&gt; It is named after the fictional ''[[Harry Potter]]'' villain [[Lord Voldemort]]. 

Voldemort is still under development. It is neither an object database, nor a relational database. It does not try to satisfy arbitrary relations and the [[ACID]] properties, but rather is a big, distributed, fault-tolerant, persistent hash table.&lt;ref name="Comparison"&gt;{{cite web
| accessdate = 2011-04-05
| location = http://project-voldemort.com/
| publisher = Project Voldemort - A distributed database
| title = Comparison to relational databases
| url = http://project-voldemort.com/}}&lt;/ref&gt;
A 2012 study comparing systems for storing [[Application Performance Management|APM]] monitoring data reported that Voldemort, [[Apache Cassandra |Cassandra]], and [[HBase]] offered linear scalability in most cases, with Voldemort having the lowest latency and Cassandra having the highest throughput.&lt;ref&gt;{{cite journal
| title = Solving Big Data Challenges for Enterprise Application Performance Management | url = http://vldb.org/pvldb/vol5/p1724_tilmannrabl_vldb2012.pdf | format = pdf | first1 = Tilmann | last1 = Rabl | first2 = Mohammad | last2 = Sadoghi | first3 = Hans-Arno | last3 = Jacobsen | first4 = Sergio | last4 = Gómez-Villamor | first5 = Victor | last5 = Muntés-Mulero | first6 = Serge | last6 = Mankovskii | journal = Proceedings of the VLDB Endowment | volume = 5 | issue = 12 | year = 2012 | month = August | pages = 1724&amp;ndash;1735}}&lt;/ref&gt;

In the parlance of Eric Brewer’s [[CAP theorem]], Voldemort is an AP type system.

==Advantages==
Voldemort offers a number of advantages over other databases:&lt;ref name="Comparison"/&gt; &lt;ref&gt;[http://www.usenix.org/events/fast12/tech/full_papers/Sumbaly.pdf Serving Large-scale Batch Computed Data with Project Voldemort]&lt;/ref&gt;
*It combines in-memory caching with the storage system so that a separate caching tier is not required (instead the storage system itself is just fast)
*It is possible to emulate the storage layer, as it is completely mockable. This makes the development and the unit testing easy, as it can be done against a throw-away in-memory storage system without the need for a real cluster or real storage system
*Reads and writes [[Horizontal scaling|scale horizontally]]
*Simple API: The API decides data replication and placement and accommodates a wide range of application-specific strategies
*Transparent data partitioning: This allows for cluster expansion without rebalancing all data

==Properties==
The Voldemort distributed data store has following properties:&lt;ref name="Voldemort"/&gt;
*Data placement: Support for pluggable data placement strategies exists to support things like distribution across data centers that are far apart.
*Data replication: The data is automatically replicated over a large number of servers.
*Data partitioning: The data is automatically partitioned so that the server contains only a subset of the total data
*Good single node performance: 10-20k operations per second can occur depending on the machines, the network, the disk system, and the data replication factor
*Node independence: Each node is independent of other nodes with no [[single point of failure|central point of failure]] or coordination
*Pluggable serialization: This allows rich keys and values including lists and tuples with named fields, as well as the integration with common serialisation frameworks. Examples for these frameworks are Avro, Java Serialization, Protocol Buffers, and Thrift
*Transparent failures: Server failures are handled transparently so that the user doesn't see such problems
*Versioning: The data items are versioned to maximize data integrity in case of failure without compromising availability of the system

==See also==
{{Portal|Free software}}
* [[Distributed data store]]
* [[NoSQL (concept)|NoSQL]]

==References==
{{Reflist}}

==External links==
* [http://project-voldemort.com/ Project Voldemort - A distributed database]

[[Category:Distributed data stores]]

&lt;!--Interwikies--&gt;</text>
      <sha1>gscamnj9bcpxxmi6o04n5y7azq170wt</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>