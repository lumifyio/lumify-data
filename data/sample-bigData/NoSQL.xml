<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>NoSQL</title>
    <ns>0</ns>
    <id>23968131</id>
    <revision>
      <id>563323962</id>
      <parentid>562717848</parentid>
      <timestamp>2013-07-08T03:42:46Z</timestamp>
      <contributor>
        <ip>141.218.36.43</ip>
      </contributor>
      <comment>[[Hazelcast]] redlink</comment>
      <text xml:space="preserve">{{Redirect|Structured storage|the Microsoft technology also known as structured storage|COM Structured Storage}}
{{cleanup-rewrite|date=May 2012}}

A '''NoSQL''' database provides a mechanism for storage and retrieval of data that uses looser consistency models rather than traditional [[relational database]]s. Motivations for this approach include simplicity of design, [[Horizontal_scaling#Horizontal_and_vertical_scaling | horizontal scaling]] and finer control over availability. NoSQL databases are often highly optimized [[#Key&amp;ndash;value_store|key&amp;ndash;value stores]] intended for simple retrieval and appending operations, with the goal being significant performance benefits in terms of [[latency]] and [[throughput]].

NoSQL database find significant and growing industry use in [[big data]] and [[real-time web]] applications.

Some NoSQL systems are referred to as "Not only SQL" to emphasize that they do in fact allow [[SQL]]-like query languages to be used despite the departure from SQL in the underlying data model.

== Characteristics ==
{{refimprove-section|date=November 2012}}

NoSQL cannot necessarily give full [[ACID]] guarantees. Usually only [[eventual consistency]] is guaranteed or transactions limited to single data items. This means that given a sufficiently long period of time over which no changes are sent, all updates can be expected to propagate eventually through the system.{{fact|date=November 2012}}. Although most of the NoSQL systems have transactions over single documents, other NoSQL systems such as eXtreme Scale&lt;ref&gt;http://www-01.ibm.com/software/webservers/appserv/extremescale/&lt;/ref&gt;, [[FoundationDB]]&lt;ref&gt;http://www.foundationdb.com&lt;/ref&gt;, OrientDB&lt;ref&gt;http://www.orientdb.org&lt;/ref&gt;, [[Wakanda (software)|WakandaDB]]&lt;ref&gt;http://www.wakandadb.org&lt;/ref&gt; and djondb&lt;ref&gt;http://djondb.com&lt;/ref&gt; state that they are able to execute transactions over multiple documents, similar to what RDBMS systems support&lt;!--present tense...they're not dead yet!--&gt; over multiple rows.{{fact|date=April 2013}}

NoSQL has a distributed, fault-tolerant architecture. Several NoSQL systems employ a distributed architecture, with the data held in a redundant manner on several servers. In this way, the system can easily scale out by adding more servers, and failure of a server can be tolerated. This type of database typically scales horizontally and is used for managing large amounts of data, when the performance and real-time nature is more important than consistency (as in indexing a large number of documents, serving pages on high-traffic web sites, and delivering streaming media).{{fact|date=November 2012}}

== History ==
Carlo Strozzi used the term ''NoSQL'' in 1998 to name his lightweight, [[Strozzi NoSQL (RDBMS)|open-source relational database]] that did not expose the standard SQL interface.&lt;ref&gt;
{{cite web
| url         = http://publications.lib.chalmers.se/records/fulltext/123839.pdf
| title       = Investigating storage solutions for large data: A comparison of well performing and scalable data storage solutions for real time extraction and batch insertion of data
| first       = Adam
| last        = Lith
| coauthors   = Jakob Mattson
| year        = 2010
| publisher   = Department of Computer Science and Engineering, Chalmers University of Technology
| location    = GÃ¶teborg
| page        = 15
| page       = 70
| format      = PDF
| accessdate  = 12 May 2011
| quote       = Carlo Strozzi first used the term NoSQL in 1998 as a name for his open source relational database that did not offer a SQL interface[...]
}}
&lt;/ref&gt; Strozzi suggests that, as the current NoSQL movement "departs from the relational model altogether; it should therefore have been called more appropriately 'NoREL'.&lt;ref&gt;{{cite web|url=http://www.strozzi.it/cgi-bin/CSA/tw7/I/en_US/nosql/Home%20Page |title=NoSQL Relational Database Management System: Home Page |publisher=Strozzi.it |date=2 October 2007 |accessdate=29 March 2010}}&lt;/ref&gt;

Eric Evans (then a [[Rackspace]] employee) reintroduced the term ''NoSQL'' in early 2009 when Johan Oskarsson of [[Last.fm]] wanted to organize an event to discuss open-source [[distributed database]]s.&lt;ref&gt;{{cite web|url= http://blog.sym-link.com/2009/05/12/nosql_2009.html |title= NoSQL 2009 |publisher= Blog.sym-link.com |date= 12 May 2009 |accessdate= 29 March 2010 }}&lt;/ref&gt; The name attempted to label the emergence of a growing number of non-relational, distributed data stores that often did not attempt to provide [[ACID|atomicity, consistency, isolation and durability]]  guarantees that are key attributes of classic relational database systems.&lt;ref&gt;{{cite web|url= http://databases.about.com/od/specificproducts/a/acid.htm |title= The ACID Model|author= Mike Chapple }}&lt;/ref&gt;

== Taxonomy ==
{{Merge to |Comparison of structured storage software|discuss=Talk:NoSQL#Taxonomy section proposal|date=March 2011}}
{{cleanup|section|date=March 2010}}
{{see also|Comparison of structured storage software}}

Often, NoSQL databases are categorized according to the way they store the data and fall under categories such as [[#Key&amp;ndash;value_store|key-value stores]], [[BigTable]] implementations, [[Document-oriented database|document store]] databases, and [[graph database]]s. With the rise of the [[real-time web]], there was a need to provide information out of large volumes of data which more or less followed similar horizontal structures. As such, NoSQL databases are often highly optimized for retrieve and append operations and often offer little functionality beyond record storage (e.g. [[#Key&amp;ndash;value_store|key value stores]]). The reduced run time flexibility compared to full SQL systems is compensated by large gains in scalability and performance for certain data models.{{Citation needed|date=February 2012}}

NoSQL implementations can be categorized by their manner of implementation:

=== Document store ===
{{main|Document-oriented database|XML database}}
The central concept of a document store is the notion of a "document". While each document-oriented database implementation differs on the details of this definition, in general, they all assume that documents encapsulate and encode data (or information) in some standard formats or encodings. Encodings in use include XML, [[YAML]], and [[JSON]] as well as binary forms like [[BSON]], PDF and Microsoft Office documents (MS Word, Excel, and so on).

Different implementations offer different ways of organizing and/or grouping documents:
* Collections
* Tags
* Non-visible Metadata
* Directory hierarchies

Compared to relational databases, for example, collections could be considered as tables as well as documents could be considered as records. But they are different: every record in a table has the same sequence of fields, while documents in a collection may have fields that are completely different.

Documents are addressed in the database via a unique '''key''' that represents that document. One of the other defining characteristics of a document-oriented database is that, beyond the simple key-document (or key&amp;ndash;value) lookup that you can use to retrieve a document, the database will offer an API or query language that will allow retrieval of documents based on their contents. Some NoSQL document stores offer an alternative way to retrieve information using [[MapReduce]] techniques, in [[CouchDB]] the usage of MapReduce is mandatory if you want to retrieve documents based on the contents, this is called "Views" and it's an indexed collection with the results of the MapReduce algorithms.

{| style="text-align: left;" class="wikitable sortable"
! Name !! Language !! Notes
|-
| [[BaseX]] || [[Java (programming language)|Java]], [[XQuery]] || [[XML database]]
|-
| [[Cloudant]] || [[Erlang_(programming language)|Erlang]], [[Java (programming language)|Java]], [[Scala (programming language)|Scala]], [[C_(programming_language)|C]] || [[JSON]] store (online service)
|-
| [[Clusterpoint]] || [[C++]] || XML, geared for [[Full text search]]
|-
| [[Couchbase Server]] || [[Erlang (programming language)|Erlang]], [[C++]] ||  Support for [[JSON]] and binary documents
|-
| [[CouchDB|Apache CouchDB]] || [[Erlang (programming language)|Erlang]] ||  [[JSON]] database
|-
| djondb&lt;ref&gt;http://djondb.com&lt;/ref&gt;&lt;ref&gt;http://tinman.cs.gsu.edu/~raj/8711/sp13/djondb/Report.pdf&lt;/ref&gt;&lt;ref&gt;http://undefvoid.blogspot.com/2013/03/meeting-with-djondb.html&lt;/ref&gt; || [[C++]] ||  [[JSON]], ACID Document Store
|-
| [[ElasticSearch]] || [[Java (programming language)|Java]] ||  [[JSON]], Search Engine
|-
| [[eXist]] || [[Java (programming language)|Java]], [[XQuery]] || [[XML database]]
|-
| [[Apache Jackrabbit|Jackrabbit]] || [[Java (programming language)|Java]] || [[Java Content Repository]] implementation
|-
| [[IBM Lotus Notes]] and [[IBM Lotus Domino|Lotus Domino]] || [[LotusScript]], [[Java (programming language)|Java]], IBM X Pages, others || [[MultiValue]]
|-
| [[MarkLogic Server]] || [[XQuery]], [[Java]], [[REST]] || [[XML database]] with support for [[JSON]], text, and binaries
|-
| [[MongoDB]] || [[C++]], [[C Sharp (programming language)|C#]], [[Go (Programming language)|Go]] || [[BSON]] store (binary format [[JSON]])
|-
| [[Oracle NoSQL Database]] || [[Java (programming language)|Java]], [[C (programming language)|C]] ||
|-
| [[OrientDB]] || [[Java (programming language)|Java]] || [[JSON]], SQL support
|-
| [[Sedna_(database)|Sedna]] || [[XQuery]], [[C++]] || [[XML database]]
|-
| [[SimpleDB]] || [[Erlang (programming language)|Erlang]] || online service
|-
| [[Virtuoso Universal Server|OpenLink Virtuoso]] || [[C++]], [[C Sharp (programming language)|C#]], [[Java (programming language)|Java]], [[SPARQL]] || [[middleware]] and [[database engine]] hybrid
|}

=== Graph ===

This kind of database is designed for data whose relations are well represented as a graph (elements interconnected with an undetermined number of relations between them). The kind of data could be social relations, public transport links, road maps or network topologies, for example.

{{main|Graph database}}

{| style="text-align: left;" class="wikitable sortable"
 ! Name !! Language !! Notes
 |-
 | [[AllegroGraph]] || [[SPARQL]] || [[Resource Description Framework|RDF]] GraphStore
 |-
 | [[IBM DB2]] || [[SPARQL]] || [[Resource Description Framework|RDF]] GraphStore added in DB2 10
 |-
 | [[DEX (Graph database)|DEX]] || [[Java (programming language)|Java]], [[C++]], [[.NET Framework |.NET]]  || High-performance [[Graph Database]]
 |-
 | [[FlockDB]] || [[Scala (programming language)|Scala]] ||
 |-
 | [[InfiniteGraph]]  || [[Java (programming language)|Java]] || High-performance, scalable, distributed [[Graph Database]]
 |-
 | [[Neo4j]] || [[Java (programming language)|Java]] ||
 |-
 | [[Virtuoso Universal Server|OpenLink Virtuoso]] ||  [[C++]], [[C Sharp (programming language)|C#]], [[Java (programming language)|Java]], [[SPARQL]] || [[middleware]] and [[database engine]] hybrid
 |-
 | [[OrientDB]] || [[Java (programming language)|Java]] ||
 |-
 | [[Sones GraphDB]] || [[C Sharp (programming language)|C#]] || Graph database with query language called ''GraphQL''|
|-
|[[Ontotext|OWLIM]] ||[[Java (programming language)|Java]], [[SPARQL|SPARQL 1.1]]|| [[Resource Description Framework|RDF]] graph store with reasoning
|-
|}

=== Key&amp;ndash;value store ===
Key&amp;ndash;value stores allow the application to store its data in a schema-less way. The data could be stored in a datatype of a programming language or an object. Because of this, there is no need for a fixed data model.&lt;ref&gt;{{cite web
| accessdate =1 January 2012
| publisher = Stackexchange
| location = http://dba.stackexchange.com/questions/607/what-is-a-key-value-store-database
| title = Key Value stores and the NoSQL movement
| author = Sandy
| date = 14 January 2011
| url = http://dba.stackexchange.com/a/619
| quote = Key&amp;ndash;value stores allow the application developer to store schema-less data. This data usually consists of a string that represents the key, and the actual data that is considered to be the value in the "key&amp;ndash;value" relationship. The data itself is usually some kind of primitive of the programming language (a string, an integer, or an array) or an object that is being marshaled by the programming language's bindings to the key&amp;ndash;value store. This structure replaces the need for a fixed data model and allows proper formatting.}}&lt;/ref&gt;&lt;ref&gt;{{cite web
| accessdate =1 January 2012
| publisher = Marc Seeger
| location = http://blog.marc-seeger.de/2009/09/21/key-value-stores-a-practical-overview/
| title = Key-Value Stores: a practical overview
| author = Marc Seeger
| date = 21 September 2009
| url = http://blog.marc-seeger.de/assets/papers/Ultra_Large_Sites_SS09-Seeger_Key_Value_Stores.pdf
| quote = Key&amp;ndash;value stores provide a high-performance alternative to relational database systems with respect to storing and accessing data. This paper provides a short overview of some of the currently available key&amp;ndash;value stores and their interface to the Ruby programming language.}}&lt;/ref&gt; The following types exist:

==== Eventuallyâconsistent keyâvalue store ====
* [[Apache Cassandra]]
* [[Dynamo (storage system)|Dynamo]]
* [[Hibari (database)|Hibari]]
* [[Virtuoso Universal Server|OpenLink Virtuoso]]
* [[Project Voldemort]]
* [[Riak]]&lt;ref&gt;{{cite web | url = https://wiki.basho.com | title = Riak: An Open Source Scalable Data Store | date = 28 November 2010 | accessdate =28 November 2010 }}&lt;/ref&gt;

==== Hierarchical key&amp;ndash;value store ====
* [[GT.M]]&lt;ref&gt;
{{cite web
| url         = http://www.mgateway.com/docs/universalNoSQL.pdf
| title       = A Universal NoSQL Engine, Using a Tried and Tested Technology
| first       = Rob
| last        = Tweed
| coauthors   = George James
| year        = 2010
| page       = 25
| format      = PDF
| quote       = Without exception, the most successful and well-known of the NoSQL databases have
been developed from scratch, all within just the last few years. Strangely, it seems
that nobody looked around to see whether there were any existing, successfully implemented
database technologies that could have provided a sound foundation for
meeting Web-scale demands. Had they done so, they might have discovered two
products, GT.M and CachÃ©...
}}&lt;/ref&gt;
* [[InterSystems CachÃ©]]

==== Hosted services ====
* [[Freebase (database)|Freebase]]
* [[Virtuoso Universal Server|OpenLink Virtuoso]]
* [[Appengine|Datastore on Google Appengine]]
* [[Amazon DynamoDB]]
* [[Cloudant|Cloudant Data Layer (CouchDB)]]

==== Key&amp;ndash;value cache in RAM ====
* [[memcached]]
* [[Virtuoso Universal Server|OpenLink Virtuoso]]
* [[Oracle Coherence]]
* [[Redis]]
* Hazelcast
* [[Tuple space]]
* [[Velocity (memory cache)|Velocity]]
* [[IBM WebSphere eXtreme Scale]]
* [[JBoss]] Infinispan&lt;ref&gt;[http://www.jboss.org/infinispan JBoss Infinispan]&lt;/ref&gt;

==== Key&amp;ndash;value stores on solid state or rotating disk ====
* [[Aerospike database|Aerospike]]
* [[BigTable]]
* [[Cdb (software)|CDB]]
* [[Couchbase Server]]
* [[Keyspace (distributed data store)|Keyspace]]
* [[LevelDB]]
* [[MemcacheDB]] (using Berkeley DB)
* [[MongoDB]]
* [[Virtuoso Universal Server|OpenLink Virtuoso]]
* [[Tarantool]]
* [[Tokyo Cabinet]]
* [[Tuple space]]
* [[Oracle NoSQL Database]]

==== Ordered key&amp;ndash;value stores ====
* [[Berkeley DB]]
* [[FoundationDB]]
* [[IBM Informix C-ISAM]]
* [[InfinityDB]]
* [[MemcacheDB]]
* [[NDBM]]

=== Multivalue databases ===
* [[Northgate Information Solutions]] Reality, the original Pick/MV Database
* [[Extensible Storage Engine]] (ESE/NT)
* [[OpenQM]]
* Revelation Software's [[OpenInsight]]
* [[Rocket U2]]
* D3 [[Pick database]]
* [[InterSystems CachÃ©]]
* [[InfinityDB]]

=== Object database ===
{{main|Object database}}

* [[db4o]]
* [[Gemstone (database)|GemStone/S]]
* [[InterSystems CachÃ©]]
* [[JADE (programming language)|JADE]]
* [[NeoDatis ODB]]
* [[ObjectDB]]
* [[Objectivity/DB]]
* [[ObjectStore]]
* [[Virtuoso Universal Server|OpenLink Virtuoso]]
* [[Versant Object Database]]
* [[Wakanda (software)|WakandaDB]]
* [[ZODB]]

=== RDF database ===
* [[Meronymy SPARQL Database Server]]
* [[Virtuoso_Universal_Server|Virtuoso Universal Server]]
* [[Ontotext|Ontotext-OWLIM]]
* [[Jena_(framework)|Apache JENA]]
* [[Oracle_NoSQL_Database|Oracle NoSQL database]]

=== Tabular ===
* [[Apache Accumulo]]
* [[BigTable]]
* [[HBase|Apache Hbase]]
* [[Hypertable]]
* [[Mnesia]]
* [[Virtuoso Universal Server|OpenLink Virtuoso]]

=== Tuple store ===
* [[Apache River]]
* [[Virtuoso Universal Server|OpenLink Virtuoso]]
* [[Tarantool]]

== See also ==
&lt;!-- please do not list specific implementations here --&gt;
* [[CAP theorem]]
* [[Comparison of object database management systems]]
* [[Comparison of structured storage software]]
* [[Faceted search]]
* [[Triplestore]]
* [[RDF Database]]
* [[Distributed cache]]

== References ==
{{Reflist|2}}

==Further reading==
*{{cite book
 | author = Pramod Sadalage and [[Martin Fowler]]
 | year = 2012
 | title = NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence
 | publisher = Addison-Wesley
 | isbn = 0-321-82662-0
}}

== External links ==
* [http://www.christof-strauch.de/nosqldbs.pdf NoSQL whitepaper]
* [http://martinfowler.com/nosql.html NoSQL Guide]
* [http://nosql-database.org/ NoSQL database List]
* [http://www.infoq.com/articles/graph-nosql-neo4j NoSQL general introduction article]

{{Use dmy dates|date=February 2012}}
{{Databases}}

{{DEFAULTSORT:Nosql}}
[[Category:Data management]]
[[Category:Distributed data stores]]
[[Category:NoSQL| ]]</text>
      <sha1>gxka9vxroeb37f6qmuq9i990xg1ig46</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>