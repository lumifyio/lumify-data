<?xml version="1.0" ?><page xmlns="http://www.mediawiki.org/xml/export-0.8/" version="0.8">
    <title>Sawzall (programming language)</title>
    <ns>0</ns>
    <id>12640293</id>
    <revision>
      <id>559032754</id>
      <parentid>544902209</parentid>
      <timestamp>2013-06-09T08:49:35Z</timestamp>
      <contributor>
        <username>UncleMartin</username>
        <id>4548248</id>
      </contributor>
      <text xml:space="preserve">'''Sawzall''' is a procedural [[Domain specific language | domain-specific]] [[programming language]], used by [[Google]] to process large numbers of individual log records. Sawzall was first described in 2003,&lt;ref&gt;Rob Pike, Sean Dorward, Robert Griesemer, Sean Quinlan. [http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/sv//archive/sawzall-sciprog.pdf Interpreting the Data: Parallel Analysis with Sawzall]&lt;/ref&gt; and the szl runtime was open-sourced in August 2010.&lt;ref&gt; http://code.google.com/p/szl/ Sawzall's open source project at Google Code.&lt;/ref&gt; However, since the [[MapReduce]] table aggregators have not been released, the open-sourced runtime is not useful for large-scale data analysis off-the-shelf.

==Motivation==
Google's server logs are stored as large collections of records ([[protocol buffers]]) that are partitioned over many disks within [[Google File System|GFS]]. In order to perform calculations involving the logs, engineers can write [[MapReduce]] programs in C++ or Java. MapReduce programs need to be compiled and may be more verbose than necessary, so writing a program to analyze the logs can be time-consuming. To make it easier to write quick scripts, [[Rob Pike]] et al. developed the Sawzall language. A Sawzall script runs within the Map phase of a MapReduce and "emits" values to tables. Then the Reduce phase (which the script writer does not have to be concerned about) aggregates the tables from multiple runs into a single set of tables.

Currently, only the language runtime (which runs a Sawzall script once over a single input) has been open-sourced; the supporting program built on MapReduce has not been released.&lt;ref&gt;[http://groups.google.com/group/szl-users/browse_thread/thread/c0d90423d0fc27bd Discussion on which parts of Sawzall are open-source]&lt;/ref&gt;

==Features==
Some interesting features include:
* A Sawzall script has a single input (a log record) and can output only by emitting to tables. The script can have no other side-effects.
* A script can define any number of output tables. Table types include:
** &lt;code&gt;collection&lt;/code&gt; saves every value emitted
** &lt;code&gt;sum&lt;/code&gt; saves the sum of every emitted value
** &lt;code&gt;maximum(n)&lt;/code&gt; saves only the highest n values on a given weight.
*In addition, there are several statistical table types that give inexact results. The higher the parameter n, the more accurate the estimates are.
** &lt;code&gt;sample(n)&lt;/code&gt; gives a random sample of n values from all the emitted values
** &lt;code&gt;quantile(n)&lt;/code&gt; calculates a cumulative probability distribution of the given numbers.
** &lt;code&gt;top(n)&lt;/code&gt; gives n values that are probably the most frequent of the emitted values.
** &lt;code&gt;unique(n)&lt;/code&gt; estimates the number of unique values emitted.

Sawzall's design favors efficiency and engine simplicity over power:
* Sawzall is statically typed, and the engine compiles the script to [[x86]] before running it.
* Sawzall supports the compound data types lists, maps, and structs. However, there are no references or pointers. All assignments and function arguments create copies. This means that recursive data structures and cycles are impossible.
* Like C, functions can modify global variables and local variables but are not closures.

==Sawzall code==
This complete Sawzall program will read the input and produce three results: the number of records, the sum of the values,
and the sum of the squares of the values.

 count: table sum of int;
 total: table sum of float;
 sum_of_squares: table sum of float;
 x: float = input;
 emit count &lt;- 1;
 emit total &lt;- x;
 emit sum_of_squares &lt;- x * x;

== See also ==
* [[Pig (programming tool)|Pig]] — similar tool and language for use with [[Apache Hadoop]]
* [[Sawmill (software)]]

==Notes==
&lt;references /&gt;

== References ==
{{More footnotes|date=April 2011}}
* S. Ghemawat, H. Gobioff, S.-T. Leung, The Google file system, in: 19th ACM Symposium on Operating Systems Principles, Proceedings, 17 ACM Press, 2003, pp. 29–43.
* [[MapReduce]] [http://www.soe.ucsc.edu/classes/cmps253/Spring07/notes/mapreduce.pdf]

{{Rob Pike navbox}}

[[Category:Domain-specific programming languages]]
[[Category:Procedural programming languages]]
[[Category:Google software]]
[[Category:Programming languages created in 2003]]

{{compu-prog-stub}}
{{Software-type-stub}}</text>
      <sha1>0ajmlhg01yugh3hgf2eq3a5gmw7kt3m</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>